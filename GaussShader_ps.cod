//
// Generated by Microsoft (R) HLSL Shader Compiler 10.1
//
//
// Buffer Definitions: 
//
// cbuffer CbBlur
// {
//
//   int SampleCount;                   // Offset:    0 Size:     4
//   float4 Offset[16];                 // Offset:   16 Size:   256
//
// }
//
//
// Resource Bindings:
//
// Name                                 Type  Format         Dim      HLSL Bind  Count
// ------------------------------ ---------- ------- ----------- -------------- ------
// ColorSampler                      sampler      NA          NA             s0      1 
// ColorBuffer                       texture  float4          2d             t0      1 
// CbBlur                            cbuffer      NA          NA            cb0      1 
//
//
//
// Input signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_POSITION              0   xyzw        0      POS   float       
// TEXCOORD                 0   xy          1     NONE   float   xy  
//
//
// Output signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_TARGET                0   xyzw        0   TARGET   float   xyzw
//
//
// Constant buffer to DX9 shader constant mappings:
//
// Target Reg Buffer  Start Reg # of Regs        Data Conversion
// ---------- ------- --------- --------- ----------------------
// c0         cb0             0         1  ( INT, FLT, FLT, FLT)
// c1         cb0             1        16  ( FLT, FLT, FLT, FLT)
//
//
// Sampler/Resource to DX9 shader sampler mappings:
//
// Target Sampler Source Sampler  Source Resource
// -------------- --------------- ----------------
// s0             s0              t0               
//
//
// Level9 shader bytecode:
//
    ps_2_x
    def c17, 0, 1, 2, -0
    def c18, 3, 4, 5, 6
    def c19, 7, 8, 9, 10
    def c20, 11, 12, 13, 14
    def c21, 15, 0, 0, 0
    dcl t0.xy
    dcl_2d s0
    add r0.xy, t0, c2
    add r1.xy, t0, c1
    texld r0, r0, s0
    texld r1, r1, s0
    mul r1.xyz, r1, c1.z
    mov r2.xy, c17
    cmp r1.xyz, -c0.x, r2.x, r1
    mad r0.xyz, c2.z, r0, r1
    mov r0.w, c17.z
    cmp r1.w, -c0.x, r2.x, r2.y
    add r2.x, r1.w, -c0.x
    cmp r0, r2.x, r1, r0
    add r1.xy, t0, c3
    add r3.xy, t0, c4
    texld r1, r1, s0
    texld r3, r3, s0
    mad r1.xyz, c3.z, r1, r0
    add r3.w, r0.w, -c0.x
    cmp r3.w, r3.w, -c17.x, -c17.y
    cmp r3.w, r2.x, c17.w, r3.w
    mov r1.w, c18.x
    cmp r0, r3.w, r0, r1
    mad r1.xyz, c4.z, r3, r0
    add r2.x, r0.w, -c0.x
    cmp r2.x, r2.x, c17.w, r3.w
    mov r1.w, c18.y
    cmp r0, r2.x, r0, r1
    add r1.xy, t0, c5
    add r3.xy, t0, c6
    texld r1, r1, s0
    texld r3, r3, s0
    mad r1.xyz, c5.z, r1, r0
    add r3.w, r0.w, -c0.x
    cmp r3.w, r3.w, c17.w, r2.x
    mov r1.w, c18.z
    cmp r0, r3.w, r0, r1
    mad r1.xyz, c6.z, r3, r0
    add r2.x, r0.w, -c0.x
    cmp r2.x, r2.x, c17.w, r3.w
    mov r1.w, c18.w
    cmp r0, r2.x, r0, r1
    add r1.xy, t0, c7
    add r3.xy, t0, c8
    texld r1, r1, s0
    texld r3, r3, s0
    mad r1.xyz, c7.z, r1, r0
    add r3.w, r0.w, -c0.x
    cmp r3.w, r3.w, c17.w, r2.x
    mov r1.w, c19.x
    cmp r0, r3.w, r0, r1
    mad r1.xyz, c8.z, r3, r0
    add r2.x, r0.w, -c0.x
    cmp r2.x, r2.x, c17.w, r3.w
    mov r1.w, c19.y
    cmp r0, r2.x, r0, r1
    add r1.xy, t0, c9
    add r3.xy, t0, c10
    texld r1, r1, s0
    texld r3, r3, s0
    mad r1.xyz, c9.z, r1, r0
    add r3.w, r0.w, -c0.x
    cmp r3.w, r3.w, c17.w, r2.x
    mov r1.w, c19.z
    cmp r0, r3.w, r0, r1
    mad r1.xyz, c10.z, r3, r0
    add r2.x, r0.w, -c0.x
    cmp r2.x, r2.x, c17.w, r3.w
    mov r1.w, c19.w
    cmp r0, r2.x, r0, r1
    add r1.xy, t0, c11
    add r3.xy, t0, c12
    texld r1, r1, s0
    texld r3, r3, s0
    mad r1.xyz, c11.z, r1, r0
    add r3.w, r0.w, -c0.x
    cmp r3.w, r3.w, c17.w, r2.x
    mov r1.w, c20.x
    cmp r0, r3.w, r0, r1
    mad r1.xyz, c12.z, r3, r0
    add r2.x, r0.w, -c0.x
    cmp r2.x, r2.x, c17.w, r3.w
    mov r1.w, c20.y
    cmp r0, r2.x, r0, r1
    add r1.xy, t0, c13
    add r3.xy, t0, c14
    texld r1, r1, s0
    texld r3, r3, s0
    mad r1.xyz, c13.z, r1, r0
    add r3.w, r0.w, -c0.x
    cmp r3.w, r3.w, c17.w, r2.x
    mov r1.w, c20.z
    cmp r0, r3.w, r0, r1
    mad r1.xyz, c14.z, r3, r0
    add r2.x, r0.w, -c0.x
    cmp r2.x, r2.x, c17.w, r3.w
    mov r1.w, c20.w
    cmp r0, r2.x, r0, r1
    add r1.xy, t0, c15
    add r3.xy, t0, c16
    texld r1, r1, s0
    texld r3, r3, s0
    mad r1.xyz, c15.z, r1, r0
    add r3.w, r0.w, -c0.x
    cmp r3.w, r3.w, c17.w, r2.x
    mov r1.w, c21.x
    cmp r0, r3.w, r0, r1
    add r0.w, r0.w, -c0.x
    cmp r0.w, r0.w, c17.w, r3.w
    mad r1.xyz, c16.z, r3, r0
    cmp r0.xyz, r0.w, r0, r1
    mov r0.w, c17.y
    mov oC0, r0

// approximately 112 instruction slots used (16 texture, 96 arithmetic)
ps_4_0
dcl_constantbuffer CB0[17], dynamicIndexed
dcl_sampler s0, mode_default
dcl_resource_texture2d (float,float,float,float) t0
dcl_input_ps linear v1.xy
dcl_output o0.xyzw
dcl_temps 2
mov r0.xyzw, l(0,0,0,0)
loop 
  ige r1.x, r0.w, cb0[0].x
  breakc_nz r1.x
  add r1.xy, v1.xyxx, cb0[r0.w + 1].xyxx
  sample r1.xyzw, r1.xyxx, t0.xyzw, s0
  mad r0.xyz, cb0[r0.w + 1].zzzz, r1.xyzx, r0.xyzx
  iadd r0.w, r0.w, l(1)
endloop 
mov o0.xyz, r0.xyzx
mov o0.w, l(1.000000)
ret 
// Approximately 12 instruction slots used
