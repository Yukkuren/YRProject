//
// Generated by Microsoft (R) HLSL Shader Compiler 10.1
//
//
// Buffer Definitions: 
//
// cbuffer CbBlur
// {
//
//   int SampleCount;                   // Offset:    0 Size:     4
//   float4 Offset[16];                 // Offset:   16 Size:   256
//
// }
//
//
// Resource Bindings:
//
// Name                                 Type  Format         Dim      HLSL Bind  Count
// ------------------------------ ---------- ------- ----------- -------------- ------
// ColorSampler                      sampler      NA          NA             s0      1 
// ColorBuffer                       texture  float4          2d             t0      1 
// CbBlur                            cbuffer      NA          NA            cb0      1 
//
//
//
// Input signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_POSITION              0   xyzw        0      POS   float       
// TEXCOORD                 0   xy          1     NONE   float   xy  
//
//
// Output signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_TARGET                0   xyzw        0   TARGET   float   xyzw
//
ps_5_0
dcl_globalFlags refactoringAllowed | skipOptimization
dcl_constantbuffer CB0[17], dynamicIndexed
dcl_sampler s0, mode_default
dcl_resource_texture2d (float,float,float,float) t0
dcl_input_ps linear v1.xy
dcl_output o0.xyzw
dcl_temps 3
//
// Initial variable locations:
//   v0.x <- input.Position.x; v0.y <- input.Position.y; v0.z <- input.Position.z; v0.w <- input.Position.w; 
//   v1.x <- input.Tex.x; v1.y <- input.Tex.y; 
//   o0.x <- <main return value>.x; o0.y <- <main return value>.y; o0.z <- <main return value>.z; o0.w <- <main return value>.w
//
#line 5 "D:\ゲーム制作\YRProject\GaussShader_ps.hlsl"
itof r0.xyz, l(0, 0, 0, 0)  // r0.x <- result.x; r0.y <- result.y; r0.z <- result.z

#line 7
mov r0.w, l(0)  // r0.w <- i
mov r1.xyz, r0.xyzx  // r1.x <- result.x; r1.y <- result.y; r1.z <- result.z
mov r1.w, r0.w  // r1.w <- i
loop 
  ilt r2.x, r1.w, cb0[0].x
  breakc_z r2.x

#line 9
  mov r2.x, r1.w
  add r2.yz, v1.xxyx, cb0[r1.w + 1].xxyx
  sample_indexable(texture2d)(float,float,float,float) r2.yzw, r2.yzyy, t0.wxyz, s0
  mul r2.xyz, r2.yzwy, cb0[r2.x + 1].zzzz
  add r1.xyz, r1.xyzx, r2.xyzx

#line 10
  iadd r1.w, r1.w, l(1)
endloop 

#line 12
mov r0.x, l(1.000000)  // r0.x <- result.w

#line 14
mov o0.xyz, r1.xyzx
mov o0.w, r0.x
ret 
// Approximately 18 instruction slots used
