//
// Generated by Microsoft (R) HLSL Shader Compiler 10.1
//
//
// Buffer Definitions: 
//
// cbuffer CbBlur
// {
//
//   int SampleCount;                   // Offset:    0 Size:     4
//   float4 Offset[16];                 // Offset:   16 Size:   256
//
// }
//
//
// Resource Bindings:
//
// Name                                 Type  Format         Dim      HLSL Bind  Count
// ------------------------------ ---------- ------- ----------- -------------- ------
// ColorSampler                      sampler      NA          NA             s0      1 
// ColorBuffer                       texture  float4          2d             t0      1 
// CbBlur                            cbuffer      NA          NA            cb0      1 
//
//
//
// Input signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_POSITION              0   xyzw        0      POS   float       
// TEXCOORD                 0   xy          1     NONE   float   xy  
//
//
// Output signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_TARGET                0   xyzw        0   TARGET   float   xyzw
//
//
// Constant buffer to DX9 shader constant mappings:
//
// Target Reg Buffer  Start Reg # of Regs        Data Conversion
// ---------- ------- --------- --------- ----------------------
// c0         cb0             0         1  ( INT, FLT, FLT, FLT)
// c1         cb0             1        16  ( FLT, FLT, FLT, FLT)
//
//
// Sampler/Resource to DX9 shader sampler mappings:
//
// Target Sampler Source Sampler  Source Resource
// -------------- --------------- ----------------
// s0             s0              t0               
//
//
// Level9 shader bytecode:
//
    ps_2_x
    def c17, 0, 1, 2, 3
    def c18, 4, 5, 6, 7
    def c19, 8, 9, 10, 11
    def c20, 12, 13, 14, 15
    dcl t0.xy  // input<4,5>
    dcl_2d s0

#line 7 "E:\ゲーム制作\YRProject\GaussShader_ps.hlsl"
    mov r0.w, -c0.x
    add r0.x, r0.w, c17.x
    cmp r0.w, r0.x, c17.x, c17.y  // ::i<0>
    mov r1.w, -r0.w
    mov r1.x, -r0.w
    add r1.x, r1.x, r1.w
    cmp r1.x, r1.x, c17.y, c17.x
    add r2.xy, t0, c1
    add r3.xy, t0, c2
    texld r2, r2, s0
    texld r3, r3, s0
    mul r1.yzw, r2.xxyz, c1.z
    add r1.yzw, r1, c17.x  // ::result<0,1,2>
    mov r2.xyz, -r0.w
    cmp r0.xyz, r2, c17.x, r1.yzww  // ::result<0,1,2>

#line 7
    mov r3.w, -r1.x
    mov r1.x, -r1.x
    add r3.w, r1.x, r3.w
    cmp r3.w, r3.w, c17.y, c17.x
    mul r3.w, r0.w, r3.w
    mov r1.x, -c0.x
    add r1.x, r0.w, r1.x
    cmp r1.x, r1.x, c17.x, c17.y
    mul r3.w, r1.x, r3.w
    mov r1.x, -r3.w
    mov r1.y, -r3.w
    add r1.x, r1.y, r1.x
    cmp r1.x, r1.x, c17.y, c17.x
    mov r1.y, -c0.x
    add r1.y, r0.w, r1.y
    cmp r1.y, r1.y, c17.x, c17.y
    mul r2.xyz, r3, c2.z
    add r2.xyz, r0, r2  // ::result<0,1,2>
    mov r2.w, c17.z  // ::i<0>

#line 10
    mov r4, -r1.y
    cmp r2, r4, r0, r2  // ::result<0,1,2>, ::i<0>

#line 7
    mov r0.x, -r1.x
    mov r0.y, -r1.x
    add r0.x, r0.y, r0.x
    cmp r0.x, r0.x, c17.y, c17.x
    mul r0.x, r0.x, r3.w
    mov r0.y, -c0.x
    add r0.y, r0.y, r2.w
    cmp r0.y, r0.y, c17.x, c17.y
    mul r0.x, r0.y, r0.x
    mov r0.y, -r0.x
    mov r0.z, -r0.x
    add r0.y, r0.z, r0.y
    cmp r0.y, r0.y, c17.y, c17.x
    mov r0.z, -c0.x
    add r0.z, r0.z, r0.w
    cmp r0.z, r0.z, c17.x, c17.y
    mov r1.x, -c0.x
    add r1.x, r1.x, r2.w
    cmp r1.x, r1.x, c17.x, c17.y
    mul r0.z, r0.z, r1.x
    add r1.xy, t0, c3
    add r3.xy, t0, c4
    texld r1, r1, s0
    texld r3, r3, s0
    mul r1.xyz, r1, c3.z
    add r1.xyz, r1, r2  // ::result<0,1,2>
    mov r1.w, c17.w  // ::i<0>

#line 10
    mov r4, -r0.z
    cmp r1, r4, r2, r1  // ::result<0,1,2>, ::i<0>

#line 7
    mov r3.w, -r0.y
    mov r0.y, -r0.y
    add r3.w, r0.y, r3.w
    cmp r3.w, r3.w, c17.y, c17.x
    mul r3.w, r0.x, r3.w
    mov r0.x, -c0.x
    add r0.x, r0.x, r1.w
    cmp r0.x, r0.x, c17.x, c17.y
    mul r3.w, r0.x, r3.w
    mov r0.x, -r3.w
    mov r0.y, -r3.w
    add r0.x, r0.y, r0.x
    cmp r0.x, r0.x, c17.y, c17.x
    mov r0.y, -c0.x
    add r0.y, r0.y, r0.w
    cmp r0.y, r0.y, c17.x, c17.y
    mov r0.z, -c0.x
    add r0.z, r0.z, r2.w
    cmp r0.z, r0.z, c17.x, c17.y
    mul r0.y, r0.z, r0.y
    mov r0.z, -c0.x
    add r0.z, r0.z, r1.w
    cmp r0.z, r0.z, c17.x, c17.y
    mul r0.y, r0.z, r0.y
    mul r2.xyz, r3, c4.z
    add r2.xyz, r1, r2  // ::result<0,1,2>
    mov r2.w, c18.x  // ::i<0>

#line 10
    mov r4, -r0.y
    cmp r1, r4, r1, r2  // ::result<0,1,2>, ::i<0>

#line 7
    mov r0.y, -r0.x
    mov r0.x, -r0.x
    add r0.x, r0.x, r0.y
    cmp r0.x, r0.x, c17.y, c17.x
    mul r0.x, r0.x, r3.w
    mov r0.y, -c0.x
    add r0.y, r0.y, r1.w
    cmp r0.y, r0.y, c17.x, c17.y
    mul r0.x, r0.y, r0.x
    mov r0.y, -r0.x
    mov r0.z, -r0.x
    add r0.y, r0.z, r0.y
    cmp r0.y, r0.y, c17.y, c17.x
    add r2.xy, t0, c5
    add r3.xy, t0, c6
    texld r2, r2, s0
    texld r3, r3, s0
    mul r2.xyz, r2, c5.z
    add r2.xyz, r1, r2  // ::result<0,1,2>
    mov r2.w, c18.y  // ::i<0>

#line 10
    mov r4, -r0.x
    cmp r1, r4, r1, r2  // ::result<0,1,2>, ::i<0>

#line 7
    mov r3.w, -r0.y
    mov r0.y, -r0.y
    add r3.w, r0.y, r3.w
    cmp r3.w, r3.w, c17.y, c17.x
    mul r3.w, r0.x, r3.w
    mov r0.x, -c0.x
    add r0.x, r0.x, r1.w
    cmp r0.x, r0.x, c17.x, c17.y
    mul r3.w, r0.x, r3.w
    mov r0.x, -r3.w
    mov r0.y, -r3.w
    add r0.x, r0.y, r0.x
    cmp r0.x, r0.x, c17.y, c17.x
    mul r0.yzw, r3.xxyz, c6.z
    add r2.xyz, r0.yzww, r1  // ::result<0,1,2>
    mov r2.w, c18.z  // ::i<0>

#line 10
    mov r4, -r3.w
    cmp r1, r4, r1, r2  // ::result<0,1,2>, ::i<0>

#line 7
    mov r0.y, -r0.x
    mov r0.x, -r0.x
    add r0.x, r0.x, r0.y
    cmp r0.x, r0.x, c17.y, c17.x
    mul r0.x, r0.x, r3.w
    mov r0.y, -c0.x
    add r0.y, r0.y, r1.w
    cmp r0.y, r0.y, c17.x, c17.y
    mul r0.x, r0.y, r0.x
    mov r0.y, -r0.x
    mov r0.z, -r0.x
    add r0.y, r0.z, r0.y
    cmp r0.y, r0.y, c17.y, c17.x
    add r2.xy, t0, c7
    add r3.xy, t0, c8
    texld r2, r2, s0
    texld r3, r3, s0
    mul r2.xyz, r2, c7.z
    add r2.xyz, r1, r2  // ::result<0,1,2>
    mov r2.w, c18.w  // ::i<0>

#line 10
    mov r4, -r0.x
    cmp r1, r4, r1, r2  // ::result<0,1,2>, ::i<0>

#line 7
    mov r3.w, -r0.y
    mov r0.y, -r0.y
    add r3.w, r0.y, r3.w
    cmp r3.w, r3.w, c17.y, c17.x
    mul r3.w, r0.x, r3.w
    mov r0.x, -c0.x
    add r0.x, r0.x, r1.w
    cmp r0.x, r0.x, c17.x, c17.y
    mul r3.w, r0.x, r3.w
    mov r0.x, -r3.w
    mov r0.y, -r3.w
    add r0.x, r0.y, r0.x
    cmp r0.x, r0.x, c17.y, c17.x
    mul r0.yzw, r3.xxyz, c8.z
    add r2.xyz, r0.yzww, r1  // ::result<0,1,2>
    mov r2.w, c19.x  // ::i<0>

#line 10
    mov r4, -r3.w
    cmp r1, r4, r1, r2  // ::result<0,1,2>, ::i<0>

#line 7
    mov r0.y, -r0.x
    mov r0.x, -r0.x
    add r0.x, r0.x, r0.y
    cmp r0.x, r0.x, c17.y, c17.x
    mul r0.x, r0.x, r3.w
    mov r0.y, -c0.x
    add r0.y, r0.y, r1.w
    cmp r0.y, r0.y, c17.x, c17.y
    mul r0.x, r0.y, r0.x
    mov r0.y, -r0.x
    mov r0.z, -r0.x
    add r0.y, r0.z, r0.y
    cmp r0.y, r0.y, c17.y, c17.x
    add r2.xy, t0, c9
    add r3.xy, t0, c10
    texld r2, r2, s0
    texld r3, r3, s0
    mul r2.xyz, r2, c9.z
    add r2.xyz, r1, r2  // ::result<0,1,2>
    mov r2.w, c19.y  // ::i<0>

#line 10
    mov r4, -r0.x
    cmp r1, r4, r1, r2  // ::result<0,1,2>, ::i<0>

#line 7
    mov r3.w, -r0.y
    mov r0.y, -r0.y
    add r3.w, r0.y, r3.w
    cmp r3.w, r3.w, c17.y, c17.x
    mul r3.w, r0.x, r3.w
    mov r0.x, -c0.x
    add r0.x, r0.x, r1.w
    cmp r0.x, r0.x, c17.x, c17.y
    mul r3.w, r0.x, r3.w
    mov r0.x, -r3.w
    mov r0.y, -r3.w
    add r0.x, r0.y, r0.x
    cmp r0.x, r0.x, c17.y, c17.x
    mul r0.yzw, r3.xxyz, c10.z
    add r2.xyz, r0.yzww, r1  // ::result<0,1,2>
    mov r2.w, c19.z  // ::i<0>

#line 10
    mov r4, -r3.w
    cmp r1, r4, r1, r2  // ::result<0,1,2>, ::i<0>

#line 7
    mov r0.y, -r0.x
    mov r0.x, -r0.x
    add r0.x, r0.x, r0.y
    cmp r0.x, r0.x, c17.y, c17.x
    mul r0.x, r0.x, r3.w
    mov r0.y, -c0.x
    add r0.y, r0.y, r1.w
    cmp r0.y, r0.y, c17.x, c17.y
    mul r0.x, r0.y, r0.x
    mov r0.y, -r0.x
    mov r0.z, -r0.x
    add r0.y, r0.z, r0.y
    cmp r0.y, r0.y, c17.y, c17.x
    add r2.xy, t0, c11
    add r3.xy, t0, c12
    texld r2, r2, s0
    texld r3, r3, s0
    mul r2.xyz, r2, c11.z
    add r2.xyz, r1, r2  // ::result<0,1,2>
    mov r2.w, c19.w  // ::i<0>

#line 10
    mov r4, -r0.x
    cmp r1, r4, r1, r2  // ::result<0,1,2>, ::i<0>

#line 7
    mov r3.w, -r0.y
    mov r0.y, -r0.y
    add r3.w, r0.y, r3.w
    cmp r3.w, r3.w, c17.y, c17.x
    mul r3.w, r0.x, r3.w
    mov r0.x, -c0.x
    add r0.x, r0.x, r1.w
    cmp r0.x, r0.x, c17.x, c17.y
    mul r3.w, r0.x, r3.w
    mov r0.x, -r3.w
    mov r0.y, -r3.w
    add r0.x, r0.y, r0.x
    cmp r0.x, r0.x, c17.y, c17.x
    mul r0.yzw, r3.xxyz, c12.z
    add r2.xyz, r0.yzww, r1  // ::result<0,1,2>
    mov r2.w, c20.x  // ::i<0>

#line 10
    mov r4, -r3.w
    cmp r1, r4, r1, r2  // ::result<0,1,2>, ::i<0>

#line 7
    mov r0.y, -r0.x
    mov r0.x, -r0.x
    add r0.x, r0.x, r0.y
    cmp r0.x, r0.x, c17.y, c17.x
    mul r0.x, r0.x, r3.w
    mov r0.y, -c0.x
    add r0.y, r0.y, r1.w
    cmp r0.y, r0.y, c17.x, c17.y
    mul r0.x, r0.y, r0.x
    mov r0.y, -r0.x
    mov r0.z, -r0.x
    add r0.y, r0.z, r0.y
    cmp r0.y, r0.y, c17.y, c17.x
    add r2.xy, t0, c13
    add r3.xy, t0, c14
    texld r2, r2, s0
    texld r3, r3, s0
    mul r2.xyz, r2, c13.z
    add r2.xyz, r1, r2  // ::result<0,1,2>
    mov r2.w, c20.y  // ::i<0>

#line 10
    mov r4, -r0.x
    cmp r1, r4, r1, r2  // ::result<0,1,2>, ::i<0>

#line 7
    mov r3.w, -r0.y
    mov r0.y, -r0.y
    add r3.w, r0.y, r3.w
    cmp r3.w, r3.w, c17.y, c17.x
    mul r3.w, r0.x, r3.w
    mov r0.x, -c0.x
    add r0.x, r0.x, r1.w
    cmp r0.x, r0.x, c17.x, c17.y
    mul r3.w, r0.x, r3.w
    mov r0.x, -r3.w
    mov r0.y, -r3.w
    add r0.x, r0.y, r0.x
    cmp r0.x, r0.x, c17.y, c17.x
    mul r0.yzw, r3.xxyz, c14.z
    add r2.xyz, r0.yzww, r1  // ::result<0,1,2>
    mov r2.w, c20.z  // ::i<0>

#line 10
    mov r4, -r3.w
    cmp r1, r4, r1, r2  // ::result<0,1,2>, ::i<0>

#line 7
    mov r0.y, -r0.x
    mov r0.x, -r0.x
    add r0.x, r0.x, r0.y
    cmp r0.x, r0.x, c17.y, c17.x
    mul r0.x, r0.x, r3.w
    mov r0.y, -c0.x
    add r0.y, r0.y, r1.w
    cmp r0.y, r0.y, c17.x, c17.y
    mul r0.x, r0.y, r0.x
    mov r0.y, -r0.x
    mov r0.z, -r0.x
    add r0.y, r0.z, r0.y
    cmp r0.y, r0.y, c17.y, c17.x
    add r2.xy, t0, c15
    add r3.xy, t0, c16
    texld r2, r2, s0
    texld r3, r3, s0
    mul r2.xyz, r2, c15.z
    add r2.xyz, r1, r2  // ::result<0,1,2>
    mov r2.w, c20.w  // ::i<0>

#line 10
    mov r4, -r0.x
    cmp r1, r4, r1, r2  // ::result<0,1,2>, ::i<0>

#line 7
    mov r3.w, -r0.y
    mov r0.y, -r0.y
    add r3.w, r0.y, r3.w
    cmp r3.w, r3.w, c17.y, c17.x
    mul r3.w, r0.x, r3.w
    mov r0.x, -c0.x
    add r1.w, r0.x, r1.w
    cmp r1.w, r1.w, c17.x, c17.y
    mul r1.w, r1.w, r3.w
    mul r0.xyz, r3, c16.z
    add r0.xyz, r0, r1  // ::result<0,1,2>
    mov r2.xyz, -r1.w
    cmp r0.xyz, r2, r1, r0  // ::result<0,1,2>

#line 14
    mov r0.xyz, r0  // ::main<0,1,2>
    mov r0.w, c17.y  // ::main<3>

#line 3
    mov oC0, r0  // ::main<0,1,2,3>

// approximately 332 instruction slots used (16 texture, 316 arithmetic)
ps_4_0
dcl_constantbuffer CB0[17], dynamicIndexed
dcl_sampler s0, mode_default
dcl_resource_texture2d (float,float,float,float) t0
dcl_input_ps linear v1.xy
dcl_output o0.xyzw
dcl_temps 4
//
// Initial variable locations:
//   v0.x <- input.Position.x; v0.y <- input.Position.y; v0.z <- input.Position.z; v0.w <- input.Position.w; 
//   v1.x <- input.Tex.x; v1.y <- input.Tex.y; 
//   o0.x <- <main return value>.x; o0.y <- <main return value>.y; o0.z <- <main return value>.z; o0.w <- <main return value>.w
//
#line 5 "E:\ゲーム制作\YRProject\GaussShader_ps.hlsl"
itof r0.xyz, l(0, 0, 0, 0)  // r0.x <- result.x; r0.y <- result.y; r0.z <- result.z

#line 7
mov r0.w, l(0)  // r0.w <- i
mov r1.xyz, r0.xyzx  // r1.x <- result.x; r1.y <- result.y; r1.z <- result.z
mov r1.w, r0.w  // r1.w <- i
loop 
  ilt r2.x, r1.w, cb0[0].x
  breakc_z r2.x

#line 9
  mov r2.x, r1.w
  add r2.yz, v1.xxyx, cb0[r1.w + 1].xxyx
  sample r3.xyzw, r2.yzyy, t0.xyzw, s0
  mul r2.xyz, r3.xyzx, cb0[r2.x + 1].zzzz
  add r1.xyz, r1.xyzx, r2.xyzx

#line 10
  iadd r1.w, r1.w, l(1)
endloop 

#line 12
mov r0.x, l(1.000000)  // r0.x <- result.w

#line 14
mov o0.xyz, r1.xyzx
mov o0.w, r0.x
ret 
// Approximately 18 instruction slots used
