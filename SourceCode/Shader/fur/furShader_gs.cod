//
// Generated by Microsoft (R) HLSL Shader Compiler 10.1
//
//
// Buffer Definitions: 
//
// cbuffer CBPerMesh
// {
//
//   row_major float4x4 world_view_projection;// Offset:    0 Size:    64
//   row_major float4x4 world;          // Offset:   64 Size:    64
//   float4 material_color;             // Offset:  128 Size:    16 [unused]
//   float4 light_direction;            // Offset:  144 Size:    16 [unused]
//   float4 light_color;                // Offset:  160 Size:    16 [unused]
//   float4 ambient_color;              // Offset:  176 Size:    16 [unused]
//   row_major float4x4 bone_transforms[128];// Offset:  192 Size:  8192 [unused]
//   float4 eyepos;                     // Offset: 8384 Size:    16 [unused]
//   float4x4 view;                     // Offset: 8400 Size:    64 [unused]
//   float4x4 projection;               // Offset: 8464 Size:    64 [unused]
//   float3 at;                         // Offset: 8528 Size:    12 [unused]
//   float lumi_factor;                 // Offset: 8540 Size:     4 [unused]
//   float offset_X;                    // Offset: 8544 Size:     4 [unused]
//   float offset_Y;                    // Offset: 8548 Size:     4 [unused]
//   float dummy00;                     // Offset: 8552 Size:     4 [unused]
//   float dummy01;                     // Offset: 8556 Size:     4 [unused]
//
// }
//
// cbuffer CBPerFrame
// {
//
//   float4 LightColor;                 // Offset:    0 Size:    16 [unused]
//   float4 LightDir;                   // Offset:   16 Size:    16 [unused]
//   float4 AmbientColor;               // Offset:   32 Size:    16 [unused]
//   float4 EyePos;                     // Offset:   48 Size:    16 [unused]
//   float Density;                     // Offset:   64 Size:     4 [unused]
//   float Distance;                    // Offset:   68 Size:     4
//   float dummy1;                      // Offset:   72 Size:     4 [unused]
//   float dummy2;                      // Offset:   76 Size:     4 [unused]
//
// }
//
//
// Resource Bindings:
//
// Name                                 Type  Format         Dim      HLSL Bind  Count
// ------------------------------ ---------- ------- ----------- -------------- ------
// CBPerMesh                         cbuffer      NA          NA            cb0      1 
// CBPerFrame                        cbuffer      NA          NA            cb2      1 
//
//
//
// Input signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// POSITION                 0   xyzw        0     NONE   float   xyzw
// NORMAL                   0   xyz         1     NONE   float   xyz 
// TEXCOORD                 0   xy          2     NONE   float   xy  
// COLOR                    0   xyzw        3     NONE   float   xyzw
// TEXCOORD                 2   xyz         4     NONE   float       
//
//
// Output signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_POSITION              0   xyzw        0      POS   float   xyzw
// TEXCOORD                 0   xy          1     NONE   float   xy  
// COLOR                    0   xyzw        2     NONE   float   xyzw
// TEXCOORD                 1   xyz         3     NONE   float   xyz 
// TEXCOORD                 2   xyz         4     NONE   float   xyz 
// NORMAL                   0   xyz         5     NONE   float   xyz 
//
gs_5_0
dcl_globalFlags refactoringAllowed | skipOptimization
dcl_constantbuffer CB0[8], immediateIndexed
dcl_constantbuffer CB2[5], immediateIndexed
dcl_input v[3][0].xyzw
dcl_input v[3][1].xyz
dcl_input v[3][2].xy
dcl_input v[3][3].xyzw
dcl_input v[3][4].xyz
dcl_temps 9
dcl_inputprimitive triangle 
dcl_stream m0
dcl_outputtopology trianglestrip 
dcl_output_siv o0.xyzw, position
dcl_output o1.xy
dcl_output o2.xyzw
dcl_output o3.xyz
dcl_output o4.xyz
dcl_output o5.xyz
dcl_maxout 48
//
// Initial variable locations:
//   m0 <- Stream; 
//   v[0][0].x <- input[0].Position.x; v[0][0].y <- input[0].Position.y; v[0][0].z <- input[0].Position.z; v[0][0].w <- input[0].Position.w; 
//   v[0][1].x <- input[0].Normal.x; v[0][1].y <- input[0].Normal.y; v[0][1].z <- input[0].Normal.z; 
//   v[0][2].x <- input[0].Tex.x; v[0][2].y <- input[0].Tex.y; 
//   v[0][3].x <- input[0].Color.x; v[0][3].y <- input[0].Color.y; v[0][3].z <- input[0].Color.z; v[0][3].w <- input[0].Color.w; 
//   v[0][4].x <- input[0].wPos.x; v[0][4].y <- input[0].wPos.y; v[0][4].z <- input[0].wPos.z; 
//   v[1][0].x <- input[1].Position.x; v[1][0].y <- input[1].Position.y; v[1][0].z <- input[1].Position.z; v[1][0].w <- input[1].Position.w; 
//   v[1][1].x <- input[1].Normal.x; v[1][1].y <- input[1].Normal.y; v[1][1].z <- input[1].Normal.z; 
//   v[1][2].x <- input[1].Tex.x; v[1][2].y <- input[1].Tex.y; 
//   v[1][3].x <- input[1].Color.x; v[1][3].y <- input[1].Color.y; v[1][3].z <- input[1].Color.z; v[1][3].w <- input[1].Color.w; 
//   v[1][4].x <- input[1].wPos.x; v[1][4].y <- input[1].wPos.y; v[1][4].z <- input[1].wPos.z; 
//   v[2][0].x <- input[2].Position.x; v[2][0].y <- input[2].Position.y; v[2][0].z <- input[2].Position.z; v[2][0].w <- input[2].Position.w; 
//   v[2][1].x <- input[2].Normal.x; v[2][1].y <- input[2].Normal.y; v[2][1].z <- input[2].Normal.z; 
//   v[2][2].x <- input[2].Tex.x; v[2][2].y <- input[2].Tex.y; 
//   v[2][3].x <- input[2].Color.x; v[2][3].y <- input[2].Color.y; v[2][3].z <- input[2].Color.z; v[2][3].w <- input[2].Color.w; 
//   v[2][4].x <- input[2].wPos.x; v[2][4].y <- input[2].wPos.y; v[2][4].z <- input[2].wPos.z
//
#line 46 "D:\ゲーム制作\YRProject\furShader.hlsli"
mov r0.x, l(16)  // r0.x <- LAYER

#line 15 "D:\ゲーム制作\YRProject\furShader_gs.hlsl"
mov r0.y, l(0)  // r0.y <- j
mov r0.z, r0.y  // r0.z <- j
loop 
  ult r0.w, r0.z, r0.x
  breakc_z r0.w

#line 16
  mov r0.w, l(0)  // r0.w <- i
  mov r1.x, r0.w  // r1.x <- i
  loop 
    ilt r1.y, r1.x, l(3)
    breakc_z r1.y

#line 17
    itof r1.yzw, l(0, 0, 0, 0)  // r1.y <- data.Normal.x; r1.z <- data.Normal.y; r1.w <- data.Normal.z

#line 18
    mov r2.xyzw, v[r1.x + 0][0].xyzw  // r2.x <- P.x; r2.y <- P.y; r2.z <- P.z; r2.w <- P.w

#line 19
    mul r3.xyz, cb2[4].yyyy, v[r1.x + 0][1].xyzx
    itof r4.xyz, r0.zzzz
    mul r3.xyz, r3.xyzx, r4.xyzx
    add r2.xyz, r2.xyzx, r3.xyzx

#line 20
    mul r3.xyzw, r2.xxxx, cb0[0].xyzw
    mul r4.xyzw, r2.yyyy, cb0[1].xyzw
    add r3.xyzw, r3.xyzw, r4.xyzw
    mul r4.xyzw, r2.zzzz, cb0[2].xyzw
    add r3.xyzw, r3.xyzw, r4.xyzw
    mul r4.xyzw, r2.wwww, cb0[3].xyzw
    add r3.xyzw, r3.xyzw, r4.xyzw  // r3.x <- data.Position.x; r3.y <- data.Position.y; r3.z <- data.Position.z; r3.w <- data.Position.w

#line 21
    mul r4.xyz, cb0[4].xyzx, v[r1.x + 0][1].xxxx
    mul r5.xyz, cb0[5].xyzx, v[r1.x + 0][1].yyyy
    add r4.xyz, r4.xyzx, r5.xyzx
    mul r5.xyz, cb0[6].xyzx, v[r1.x + 0][1].zzzz
    add r4.xyz, r4.xyzx, r5.xyzx
    dp3 r4.w, r4.xyzx, r4.xyzx
    rsq r4.w, r4.w
    mul r4.xyz, r4.wwww, r4.xyzx  // r4.x <- data.wNormal.x; r4.y <- data.wNormal.y; r4.z <- data.wNormal.z

#line 22
    mov r5.xy, v[r1.x + 0][2].xyxx  // r5.x <- data.Tex.x; r5.y <- data.Tex.y

#line 24
    itof r4.w, r0.z
    utof r5.z, r0.x
    div r4.w, r4.w, r5.z
    sqrt r4.w, r4.w
    mul r6.xyz, r4.wwww, v[r1.x + 0][3].xyzx  // r6.x <- data.Color.x; r6.y <- data.Color.y; r6.z <- data.Color.z

#line 25
    itof r4.w, r0.z
    utof r5.z, r0.x
    div r4.w, r4.w, r5.z
    mov r4.w, -r4.w
    add r4.w, r4.w, l(1.000000)
    mul r4.w, r4.w, v[r1.x + 0][3].w  // r4.w <- data.Color.w

#line 26
    mul r7.xyz, r2.xxxx, cb0[4].xyzx
    mul r8.xyz, r2.yyyy, cb0[5].xyzx
    add r7.xyz, r7.xyzx, r8.xyzx
    mul r2.xyz, r2.zzzz, cb0[6].xyzx
    add r2.xyz, r2.xyzx, r7.xyzx
    mul r7.xyz, r2.wwww, cb0[7].xyzx
    add r2.xyz, r2.xyzx, r7.xyzx  // r2.x <- data.wPos.x; r2.y <- data.wPos.y; r2.z <- data.wPos.z

#line 27
    mov o0.xyzw, r3.xyzw
    mov o1.xy, r5.xyxx
    mov o2.xyz, r6.xyzx
    mov o2.w, r4.w
    mov o3.xyz, r4.xyzx
    mov o4.xyz, r2.xyzx
    mov o5.xyz, r1.yzwy
    emit_stream m0

#line 28
    iadd r1.x, r1.x, l(1)
  endloop 

#line 30
  iadd r0.z, r0.z, l(1)
endloop 

#line 31
cut_stream m0

#line 32
ret 
// Approximately 65 instruction slots used
