//
// Generated by Microsoft (R) HLSL Shader Compiler 10.1
//
//
// Buffer Definitions: 
//
// cbuffer CONSTANT_BUFFER
// {
//
//   float3 iResolution;                // Offset:    0 Size:    12
//   float iTime;                       // Offset:   12 Size:     4
//   float brightness;                  // Offset:   16 Size:     4 [unused]
//   float ray_brightness;              // Offset:   20 Size:     4 [unused]
//   float gamma;                       // Offset:   24 Size:     4 [unused]
//   float spot_brightness;             // Offset:   28 Size:     4 [unused]
//   float ray_density;                 // Offset:   32 Size:     4 [unused]
//   float curvature;                   // Offset:   36 Size:     4 [unused]
//   float red;                         // Offset:   40 Size:     4 [unused]
//   float green;                       // Offset:   44 Size:     4 [unused]
//   float blue;                        // Offset:   48 Size:     4 [unused]
//   float4 material_color;             // Offset:   64 Size:    16 [unused]
//   float dummy1;                      // Offset:   80 Size:     4 [unused]
//   float dummy2;                      // Offset:   84 Size:     4 [unused]
//   float dummy3;                      // Offset:   88 Size:     4 [unused]
//
// }
//
//
// Resource Bindings:
//
// Name                                 Type  Format         Dim      HLSL Bind  Count
// ------------------------------ ---------- ------- ----------- -------------- ------
// CONSTANT_BUFFER                   cbuffer      NA          NA            cb0      1 
//
//
//
// Input signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_POSITION              0   xyzw        0      POS   float   xy  
// TEXCOORD                 0   xy          1     NONE   float       
//
//
// Output signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_TARGET                0   xyzw        0   TARGET   float   xyzw
//
ps_5_0
dcl_globalFlags refactoringAllowed | skipOptimization
dcl_constantbuffer CB0[1], immediateIndexed
dcl_input_ps_siv linear noperspective v0.xy, position
dcl_output o0.xyzw
dcl_temps 2
//
// Initial variable locations:
//   v0.x <- pin.position.x; v0.y <- pin.position.y; v0.z <- pin.position.z; v0.w <- pin.position.w; 
//   v1.x <- pin.fragCoord.x; v1.y <- pin.fragCoord.y; 
//   o0.x <- <main return value>.Color.x; o0.y <- <main return value>.Color.y; o0.z <- <main return value>.Color.z; o0.w <- <main return value>.Color.w
//
#line 29 "D:\ゲーム制作\YRProject\LoadShader_ps.hlsl"
mov r0.xy, v0.xyxx  // r0.x <- fragCoord.x; r0.y <- fragCoord.y

#line 31
mov r0.z, -r0.y
add r0.y, r0.z, cb0[0].y

#line 33
nop 
mov r0.x, r0.x
mov r0.y, r0.y

#line 6
mul r0.xy, r0.xyxx, l(2.000000, 2.000000, 0.000000, 0.000000)
mov r0.zw, -cb0[0].xxxy
add r0.xy, r0.zwzz, r0.xyxx
div r0.xy, r0.xyxx, cb0[0].yyyy  // r0.x <- uv.x; r0.y <- uv.y

#line 7
mov r0.zw, l(-0.000000,-0.000000,-0.000000,-0.000000)
add r0.zw, r0.zzzw, r0.xxxy
dp2 r0.z, r0.zwzz, r0.zwzz
sqrt r0.z, r0.z
mul r0.z, r0.z, l(0.250000)
mul r0.w, cb0[0].w, l(2.670000)
sincos null, r0.w, r0.w
mul r0.z, r0.w, r0.z
add r0.xy, r0.zzzz, r0.xyxx

#line 10
mov r1.xyz, l(0.600000,0.600000,0.600000,0)  // r1.x <- color_offset.x; r1.y <- color_offset.y; r1.z <- color_offset.z

#line 11
mul r1.xyz, r1.xyzx, l(3.140000, 3.140000, 3.140000, 0.000000)
add r1.xyz, r1.xyzx, cb0[0].wwww
sincos r1.xyz, null, r1.xyzx
mul r1.xyz, r1.xyzx, l(0.500000, 0.500000, 0.500000, 0.000000)
add r1.xyz, r1.xyzx, l(1.000000, 1.000000, 1.000000, 0.000000)
mov r0.zw, l(-0.000000,-0.000000,-0.000000,-0.000000)
add r0.zw, r0.zzzw, r0.xxxy
dp2 r0.z, r0.zwzz, r0.zwzz
sqrt r0.z, r0.z
mul r0.z, r0.z, l(1.442695)
exp r0.z, r0.z
mul r1.xyz, r0.zzzz, r1.xyzx  // r1.x <- circle_col.x; r1.y <- circle_col.y; r1.z <- circle_col.z

#line 13
mul r0.z, cb0[0].w, l(2.000000)
frc r0.z, r0.z
mul r0.z, r0.z, l(1.442695)
exp r0.z, r0.z
div r0.xy, r0.xyxx, r0.zzzz

#line 15
mov r0.zw, l(-0.000000,-0.000000,-0.000000,-0.000000)
add r0.xy, r0.zwzz, r0.xyxx
dp2 r0.x, r0.xyxx, r0.xyxx
sqrt r0.x, r0.x  // r0.x <- dist

#line 16
log r0.x, r0.x
mul r0.x, r0.x, l(0.693147)
frc r0.x, r0.x  // r0.x <- dist

#line 18
mov r0.y, l(-1.000000)
add r0.z, r0.y, l(0.900000)
add r0.y, r0.y, r0.x
div r0.z, l(1.000000, 1.000000, 1.000000, 1.000000), r0.z
mul r0.y, r0.z, r0.y
max r0.y, r0.y, l(0.000000)
min r0.y, r0.y, l(1.000000)
mul r0.z, r0.y, l(-2.000000)
add r0.z, r0.z, l(3.000000)
mul r0.y, r0.y, r0.y
mul r0.y, r0.y, r0.z  // r0.y <- out_circle

#line 19
mov r0.z, l(-0.950000)
add r0.w, r0.z, l(0.890000)
add r0.x, r0.z, r0.x
div r0.z, l(1.000000, 1.000000, 1.000000, 1.000000), r0.w
mul r0.x, r0.z, r0.x
max r0.x, r0.x, l(0.000000)
min r0.x, r0.x, l(1.000000)
mul r0.z, r0.x, l(-2.000000)
add r0.z, r0.z, l(3.000000)
mul r0.x, r0.x, r0.x
mul r0.x, r0.x, r0.z  // r0.x <- in_circle

#line 20
mov r0.x, -r0.x
add r0.x, r0.x, r0.y
mul r0.xyz, r0.xxxx, r1.xyzx  // r0.x <- circle.x; r0.y <- circle.y; r0.z <- circle.z

#line 22
mul r0.xyz, r0.xyzx, l(1.000000, 1.000000, 1.000000, 0.000000)  // r0.x <- fragColor.x; r0.y <- fragColor.y; r0.z <- fragColor.z
mov r0.w, l(1.000000)  // r0.w <- fragColor.w

#line 33
mov r0.xyzw, r0.xyzw  // r0.x <- fragColor.x; r0.y <- fragColor.y; r0.z <- fragColor.z; r0.w <- fragColor.w

#line 35
mov r0.xyzw, r0.xyzw  // r0.x <- Out.Color.x; r0.y <- Out.Color.y; r0.z <- Out.Color.z; r0.w <- Out.Color.w

#line 38
mov o0.xyzw, r0.xyzw
ret 
// Approximately 75 instruction slots used
