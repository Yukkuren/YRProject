//
// Generated by Microsoft (R) HLSL Shader Compiler 10.1
//
//
// Buffer Definitions: 
//
// cbuffer CONSTANT_BUFFER
// {
//
//   float3 iResolution;                // Offset:    0 Size:    12
//   float iTime;                       // Offset:   12 Size:     4
//   float brightness;                  // Offset:   16 Size:     4
//   float ray_brightness;              // Offset:   20 Size:     4
//   float gamma;                       // Offset:   24 Size:     4
//   float spot_brightness;             // Offset:   28 Size:     4
//   float ray_density;                 // Offset:   32 Size:     4
//   float curvature;                   // Offset:   36 Size:     4
//   float red;                         // Offset:   40 Size:     4
//   float green;                       // Offset:   44 Size:     4
//   float blue;                        // Offset:   48 Size:     4
//   float4 material_color;             // Offset:   64 Size:    16
//   float dummy1;                      // Offset:   80 Size:     4 [unused]
//   float dummy2;                      // Offset:   84 Size:     4 [unused]
//   float dummy3;                      // Offset:   88 Size:     4 [unused]
//
// }
//
//
// Resource Bindings:
//
// Name                                 Type  Format         Dim      HLSL Bind  Count
// ------------------------------ ---------- ------- ----------- -------------- ------
// DecalSampler                      sampler      NA          NA             s0      1 
// iChannel0                         texture  float4          2d             t0      1 
// CONSTANT_BUFFER                   cbuffer      NA          NA            cb0      1 
//
//
//
// Input signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_POSITION              0   xyzw        0      POS   float       
// TEXCOORD                 0   xy          1     NONE   float   xy  
//
//
// Output signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_TARGET                0   xyzw        0   TARGET   float   xyzw
// SV_TARGET                1   xyzw        1   TARGET   float   xyzw
//
ps_5_0
dcl_globalFlags refactoringAllowed | skipOptimization
dcl_constantbuffer CB0[5], immediateIndexed
dcl_sampler s0, mode_default
dcl_resource_texture2d (float,float,float,float) t0
dcl_input_ps linear v1.xy
dcl_output o0.xyzw
dcl_output o1.xyzw
dcl_temps 5
//
// Initial variable locations:
//   v0.x <- input.position.x; v0.y <- input.position.y; v0.z <- input.position.z; v0.w <- input.position.w; 
//   v1.x <- input.fragCoord.x; v1.y <- input.fragCoord.y; 
//   o1.x <- <main return value>.Luminance.x; o1.y <- <main return value>.Luminance.y; o1.z <- <main return value>.Luminance.z; o1.w <- <main return value>.Luminance.w; 
//   o0.x <- <main return value>.Color.x; o0.y <- <main return value>.Color.y; o0.z <- <main return value>.Color.z; o0.w <- <main return value>.Color.w
//
#line 3 "D:\ゲーム制作\YRProject\SourceCode\Shader\Title\TitleShader.hlsli"
mov r0.xyzw, l(0.800000,0.600000,-0.600000,0.800000)  // r0.x <- m2._m00; r0.y <- m2._m01; r0.z <- m2._m10; r0.w <- m2._m11

#line 106 "D:\ゲーム制作\YRProject\SourceCode\Shader\Title\TitleShader_ps.hlsl"
mov r1.x, -cb0[0].w
mul r1.x, r1.x, l(0.030000)  // r1.x <- t

#line 107
mul r1.y, v1.x, cb0[0].x  // r1.y <- frag.x
mul r1.z, v1.y, cb0[0].y  // r1.z <- frag.y

#line 108
div r1.yz, r1.yyzy, cb0[0].xxyx
mov r2.xy, l(-0.500000,-0.500000,-0.000000,-0.000000)
add r2.yz, r1.yyzy, r2.xxyx  // r2.y <- uv.x; r2.z <- uv.y

#line 109
div r1.y, cb0[0].x, cb0[0].y
mul r2.x, r1.y, r2.y  // r2.x <- uv.x

#line 110
mul r1.y, cb0[2].y, l(0.050000)
add r1.y, r1.y, l(0.000100)
mul r1.yz, r1.yyyy, r2.xxzx  // r1.y <- uv.x; r1.z <- uv.y

#line 112
dp2 r1.w, r1.yzyy, r1.yzyy
sqrt r1.w, r1.w  // r1.w <- r

#line 113
dp2 r2.x, r1.yzyy, r1.yzyy
rsq r2.x, r2.x
mul r2.xy, r1.yzyy, r2.xxxx
dp2 r2.x, r2.xyxx, l(0.500000, 0.000000, 0.000000, 0.000000)
add r2.x, r1.x, r2.x  // r2.x <- x

#line 114
dp2 r2.y, r1.yzyy, r1.yzyy
rsq r2.y, r2.y
mul r1.yz, r1.yyzy, r2.yyyy
dp2 r1.y, r1.yzyy, l(0.000000, 0.500000, 0.000000, 0.000000)
add r1.x, r1.x, r1.y  // r1.x <- y

#line 116
nop 
mul r1.y, r1.x, cb0[2].x
mul r3.x, r1.y, l(0.500000)
mul r1.y, r2.x, cb0[2].x
mul r1.y, r1.y, l(0.200000)
add r3.y, r1.y, r1.w

#line 80
mov r1.y, l(2.000000)  // r1.y <- z

#line 81
mov r1.z, l(0)  // r1.z <- rz

#line 82
mul r2.xy, r3.xyxx, l(0.250000, 0.250000, 0.000000, 0.000000)  // r2.x <- p.x; r2.y <- p.y

#line 83
mov r2.z, l(1.000000)  // r2.z <- i
mov r3.xy, r2.xyxx  // r3.x <- p.x; r3.y <- p.y
mov r2.w, r1.y  // r2.w <- z
mov r3.z, r1.z  // r3.z <- rz
mov r3.w, r2.z  // r3.w <- i
loop 
  lt r4.x, r3.w, l(6.000000)
  breakc_z r4.x

#line 85
  nop 
  mov r3.xy, r3.xyxx

#line 75
  mul r4.xy, r3.xyxx, l(0.010000, 0.010000, 0.000000, 0.000000)
  sample_indexable(texture2d)(float,float,float,float) r4.x, r4.xyxx, t0.xyzw, s0
  mov r4.x, r4.x  // r4.x <- <noise return value>

#line 85
  mov r4.y, l(-0.500000)
  add r4.x, r4.y, r4.x
  mul r4.x, r4.x, l(2.000000)
  mov r4.y, -r4.x
  max r4.x, r4.y, r4.x
  div r4.x, r4.x, r2.w
  add r3.z, r3.z, r4.x

#line 88
  mul r2.w, r2.w, l(2.000000)

#line 89
  mul r4.xy, r3.xyxx, l(2.000000, 2.000000, 0.000000, 0.000000)  // r4.x <- p.x; r4.y <- p.y

#line 90
  dp2 r3.x, r4.xyxx, r0.xzxx  // r3.x <- p.x
  dp2 r3.y, r4.xyxx, r0.ywyy  // r3.y <- p.y

#line 91
  add r3.w, r3.w, l(1.000000)
endloop 

#line 92
mov r3.z, r3.z  // r3.z <- <fbm return value>

#line 116
mov r3.z, r3.z  // r3.z <- x

#line 117
nop 
mul r1.x, r1.x, cb0[2].x
mul r1.x, r1.x, l(0.100000)
add r1.x, r1.x, r1.w
mul r1.z, r3.z, cb0[2].x
mul r1.y, r1.z, l(0.500000)

#line 80
mov r1.z, l(2.000000)  // r1.z <- z

#line 81
mov r2.x, l(0)  // r2.x <- rz

#line 82
mul r1.xy, r1.xyxx, l(0.250000, 0.250000, 0.000000, 0.000000)

#line 83
mov r2.y, l(1.000000)  // r2.y <- i
mov r2.zw, r1.xxxy  // r2.z <- p.x; r2.w <- p.y
mov r3.x, r1.z  // r3.x <- z
mov r3.y, r2.x  // r3.y <- rz
mov r3.w, r2.y  // r3.w <- i
loop 
  lt r4.x, r3.w, l(6.000000)
  breakc_z r4.x

#line 85
  nop 
  mov r2.zw, r2.zzzw

#line 75
  mul r4.xy, r2.zwzz, l(0.010000, 0.010000, 0.000000, 0.000000)
  sample_indexable(texture2d)(float,float,float,float) r4.x, r4.xyxx, t0.xyzw, s0
  mov r4.x, r4.x  // r4.x <- <noise return value>

#line 85
  mov r4.y, l(-0.500000)
  add r4.x, r4.y, r4.x
  mul r4.x, r4.x, l(2.000000)
  mov r4.y, -r4.x
  max r4.x, r4.y, r4.x
  div r4.x, r4.x, r3.x
  add r3.y, r3.y, r4.x

#line 88
  mul r3.x, r3.x, l(2.000000)

#line 89
  mul r4.xy, r2.zwzz, l(2.000000, 2.000000, 0.000000, 0.000000)  // r4.x <- p.x; r4.y <- p.y

#line 90
  dp2 r2.z, r4.xyxx, r0.xzxx  // r2.z <- p.x
  dp2 r2.w, r4.xyxx, r0.ywyy  // r2.w <- p.y

#line 91
  add r3.w, r3.w, l(1.000000)
endloop 

#line 92
mov r3.y, r3.y  // r3.y <- <fbm return value>

#line 117
mov r3.y, r3.y  // r3.y <- y

#line 120
nop 
mul r1.x, r3.y, cb0[2].x
add r1.x, r1.x, r1.w
mul r1.z, r3.z, cb0[2].x
add r1.z, r1.z, r1.w
mov r2.x, -r3.y
add r1.y, r1.z, r2.x

#line 80
mov r1.z, l(2.000000)  // r1.z <- z

#line 81
mov r2.x, l(0)  // r2.x <- rz

#line 82
mul r1.xy, r1.xyxx, l(0.250000, 0.250000, 0.000000, 0.000000)

#line 83
mov r2.y, l(1.000000)  // r2.y <- i
mov r2.zw, r1.xxxy  // r2.z <- p.x; r2.w <- p.y
mov r3.x, r1.z  // r3.x <- z
mov r3.y, r2.x  // r3.y <- rz
mov r3.z, r2.y  // r3.z <- i
loop 
  lt r3.w, r3.z, l(6.000000)
  breakc_z r3.w

#line 85
  nop 
  mov r2.zw, r2.zzzw

#line 75
  mul r4.xy, r2.zwzz, l(0.010000, 0.010000, 0.000000, 0.000000)
  sample_indexable(texture2d)(float,float,float,float) r3.w, r4.xyxx, t0.yzwx, s0
  mov r3.w, r3.w  // r3.w <- <noise return value>

#line 85
  mov r4.x, l(-0.500000)
  add r3.w, r3.w, r4.x
  mul r3.w, r3.w, l(2.000000)
  mov r4.x, -r3.w
  max r3.w, r3.w, r4.x
  div r3.w, r3.w, r3.x
  add r3.y, r3.w, r3.y

#line 88
  mul r3.x, r3.x, l(2.000000)

#line 89
  mul r4.xy, r2.zwzz, l(2.000000, 2.000000, 0.000000, 0.000000)  // r4.x <- p.x; r4.y <- p.y

#line 90
  dp2 r2.z, r4.xyxx, r0.xzxx  // r2.z <- p.x
  dp2 r2.w, r4.xyxx, r0.ywyy  // r2.w <- p.y

#line 91
  add r3.z, r3.z, l(1.000000)
endloop 

#line 92
mov r3.y, r3.y  // r3.y <- <fbm return value>

#line 120
mov r3.y, r3.y  // r3.y <- val

#line 121
mul r0.x, cb0[1].z, l(0.020000)
mov r0.y, l(-0.100000)
add r0.x, r0.y, r0.x
mul r0.y, cb0[1].z, l(0.020000)
mov r0.z, l(-0.100000)
add r0.y, r0.z, r0.y
add r0.y, r0.y, cb0[1].y
add r0.y, r0.y, l(0.001000)
mov r0.x, -r0.x
add r0.y, r0.x, r0.y
add r0.x, r0.x, r3.y
div r0.y, l(1.000000, 1.000000, 1.000000, 1.000000), r0.y
mul r0.x, r0.y, r0.x
max r0.x, r0.x, l(0.000000)
min r0.x, r0.x, l(1.000000)
mul r0.y, r0.x, l(-2.000000)
add r0.y, r0.y, l(3.000000)
mul r0.x, r0.x, r0.x
mul r0.x, r0.x, r0.y  // r0.x <- val

#line 122
sqrt r0.x, r0.x

#line 124
div r1.xy, r0.xxxx, cb0[2].zwzz  // r1.x <- col.x; r1.y <- col.y
div r1.z, r0.x, cb0[3].x  // r1.z <- col.z

#line 125
mov r0.xyz, -r1.xyzx
add r0.xyz, r0.xyzx, l(1.000000, 1.000000, 1.000000, 0.000000)
max r0.xyz, r0.xyzx, l(0.000000, 0.000000, 0.000000, 0.000000)
min r0.xyz, r0.xyzx, l(1.000000, 1.000000, 1.000000, 0.000000)  // r0.x <- col.x; r0.y <- col.y; r0.z <- col.z

#line 126
div r0.w, r1.w, l(0.100000)
div r0.w, r0.w, cb0[2].y
mul r0.w, r0.w, l(200.000000)
div r0.w, r0.w, cb0[1].x
mov r0.w, -r0.w
add r0.w, r0.w, cb0[1].w
mov r1.xyz, -r0.xyzx
add r1.xyz, r1.xyzx, l(1.000000, 1.000000, 1.000000, 0.000000)
mul r1.xyz, r0.wwww, r1.xyzx
add r0.xyz, r0.xyzx, r1.xyzx

#line 127
max r0.xyz, r0.xyzx, l(0.000000, 0.000000, 0.000000, 0.000000)
min r0.xyz, r0.xyzx, l(1.000000, 1.000000, 1.000000, 0.000000)  // r0.x <- col.x; r0.y <- col.y; r0.z <- col.z

#line 128
log r0.xyz, r0.xyzx
mul r0.xyz, r0.xyzx, l(1.700000, 1.700000, 1.700000, 0.000000)
exp r0.xyz, r0.xyzx  // r0.x <- col.x; r0.y <- col.y; r0.z <- col.z

#line 130
mul r0.x, r0.x, cb0[4].x

#line 132
mov r0.w, l(1.000000)
mov r0.xyzw, r0.xyzw  // r0.x <- Out.Color.x; r0.y <- Out.Color.y; r0.z <- Out.Color.z; r0.w <- Out.Color.w

#line 133
mov r1.xyzw, l(0,0,0,0)  // r1.x <- Out.Luminance.x; r1.y <- Out.Luminance.y; r1.z <- Out.Luminance.z; r1.w <- Out.Luminance.w

#line 135
mov o0.xyzw, r0.xyzw
mov o1.xyzw, r1.xyzw
ret 
// Approximately 185 instruction slots used
