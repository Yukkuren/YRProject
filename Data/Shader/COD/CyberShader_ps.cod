//
// Generated by Microsoft (R) HLSL Shader Compiler 10.1
//
//
// Buffer Definitions: 
//
// cbuffer CONSTANT_BUFFER
// {
//
//   float3 iResolution;                // Offset:    0 Size:    12
//   float iTime;                       // Offset:   12 Size:     4
//   float brightness;                  // Offset:   16 Size:     4 [unused]
//   float ray_brightness;              // Offset:   20 Size:     4 [unused]
//   float gamma;                       // Offset:   24 Size:     4 [unused]
//   float spot_brightness;             // Offset:   28 Size:     4 [unused]
//   float ray_density;                 // Offset:   32 Size:     4 [unused]
//   float curvature;                   // Offset:   36 Size:     4 [unused]
//   float red;                         // Offset:   40 Size:     4 [unused]
//   float green;                       // Offset:   44 Size:     4 [unused]
//   float blue;                        // Offset:   48 Size:     4 [unused]
//   float4 material_color;             // Offset:   64 Size:    16 [unused]
//   float dummy1;                      // Offset:   80 Size:     4 [unused]
//   float dummy2;                      // Offset:   84 Size:     4 [unused]
//   float dummy3;                      // Offset:   88 Size:     4 [unused]
//
// }
//
//
// Resource Bindings:
//
// Name                                 Type  Format         Dim      HLSL Bind  Count
// ------------------------------ ---------- ------- ----------- -------------- ------
// CONSTANT_BUFFER                   cbuffer      NA          NA            cb0      1 
//
//
//
// Input signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_POSITION              0   xyzw        0      POS   float   xy  
// TEXCOORD                 0   xy          1     NONE   float       
//
//
// Output signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_TARGET                0   xyzw        0   TARGET   float   xyzw
// SV_TARGET                1   xyzw        1   TARGET   float   xyzw
//
ps_5_0
dcl_globalFlags refactoringAllowed
dcl_constantbuffer CB0[1], immediateIndexed
dcl_input_ps_siv linear noperspective v0.xy, position
dcl_output o0.xyzw
dcl_output o1.xyzw
dcl_temps 6
add r0.y, -v0.y, cb0[0].y
mov r0.x, v0.x
mad r0.xy, r0.xyxx, l(2.000000, 2.000000, 0.000000, 0.000000), -cb0[0].xyxx
div r0.xy, r0.xyxx, cb0[0].yyyy
add r0.z, r0.y, l(0.200000)
add r0.w, |r0.z|, l(-0.100000)
mul r0.w, r0.w, l(-8.333333)
max r0.w, r0.w, l(0.000000)
mad r1.x, r0.w, l(-2.000000), l(3.000000)
mul r0.w, r0.w, r0.w
mul r0.w, r0.w, r1.x
lt r1.x, r0.y, l(-0.200000)
if_nz r1.x
  add r0.z, |r0.z|, l(0.050000)
  div r1.y, l(3.000000), r0.z
  mul r1.x, r0.x, r1.y
  mul r1.z, r1.y, r1.y
  mul r2.xyzw, r1.yzyz, l(0.010000, 0.002000, 0.050000, 0.010000)
  mov r3.x, l(0)
  mul r3.y, cb0[0].w, l(4.200000)
  add r1.xw, r1.xxxy, r3.xxxy
  frc r1.xw, r1.xxxw
  add r1.xw, r1.xxxw, l(-0.500000, 0.000000, 0.000000, -0.500000)
  mad r1.xyzw, -r1.yzyz, l(0.010000, 0.002000, 0.050000, 0.010000), |r1.xwxw|
  div r2.xyzw, l(1.000000, 1.000000, 1.000000, 1.000000), -r2.xyzw
  mul_sat r1.xyzw, r1.xyzw, r2.xyzw
  mad r2.xyzw, r1.xyzw, l(-2.000000, -2.000000, -2.000000, -2.000000), l(3.000000, 3.000000, 3.000000, 3.000000)
  mul r1.xyzw, r1.xyzw, r1.xyzw
  mul r1.xyzw, r1.xyzw, r2.xyzw
  mad r1.xy, r1.zwzz, l(0.400000, 0.400000, 0.000000, 0.000000), r1.xyxx
  add r0.z, r1.y, r1.x
  min r0.z, r0.z, l(3.000000)
  mad r1.xyz, r0.zzzz, l(1.000000, 0.400000, 0.800000, 0.000000), l(0.000000, 0.100000, 0.200000, 0.000000)
else 
  add r2.y, r0.y, l(-0.590000)
  mad_sat r0.y, r2.y, l(3.500000), l(3.000000)
  mad r3.xyz, r0.yyyy, l(-1.000000, -0.120000, -0.600000, 0.000000), l(2.000000, 0.620000, 1.800000, 0.000000)
  mad r0.x, cb0[0].w, l(0.100000), r0.x
  mul r0.x, r0.x, l(0.250000)
  ge r0.y, r0.x, -r0.x
  frc r0.x, |r0.x|
  movc r0.x, r0.y, r0.x, -r0.x
  mad r2.x, r0.x, l(4.000000), l(-2.000000)
  mad r4.xyzw, cb0[0].wwww, l(0.500000, 0.450000, 0.433500, 0.450000), l(140.500000, -36.560001, 387.165009, -316.559998)
  sincos r0.xy, null, r4.xwxx
  sincos null, r2.zw, r4.yyyz
  mad r4.xyz, cb0[0].wwww, l(0.483750, 0.510000, 0.483750, 0.000000), l(-15.162000, 541.750000, 665.161987, 0.000000)
  sincos null, r4.xy, r4.xyxx
  mad r5.x, r0.x, l(0.100000), l(0.212500)
  mad r5.z, r2.w, l(0.100000), l(0.312500)
  mov r5.yw, l(0,-0.500000,0,-0.250000)
  max r0.xz, r5.zzwz, r5.xxyx
  mad r5.x, r2.z, l(0.100000), l(0.937500)
  mad r5.z, r4.x, l(0.090000), l(0.387500)
  mov r5.yw, l(0,-0.500000,0,-0.250000)
  min r2.zw, r5.zzzw, r5.xxxy
  add r0.xz, r0.xxzx, r2.zzwz
  mad r0.xz, -r0.xxzx, l(0.500000, 0.000000, 0.500000, 0.000000), r2.xxyx
  add r0.xz, |r0.xxzx|, l(-0.040000, 0.000000, -0.125000, 0.000000)
  max r2.zw, r0.xxxz, l(0.000000, 0.000000, 0.000000, 0.000000)
  dp2 r1.w, r2.zwzz, r2.zwzz
  sqrt r1.w, r1.w
  max r0.x, r0.z, r0.x
  min r0.x, r0.x, l(0.000000)
  add r0.x, r0.x, r1.w
  add r0.x, r0.x, l(0.075000)
  mad r0.z, r0.x, l(10.000000), l(0.500000)
  min r0.z, r0.z, l(1.000000)
  mad r0.x, r0.z, -r0.x, r0.x
  mul r1.w, r0.z, l(0.050000)
  add r0.z, -r0.z, l(1.000000)
  mad r0.x, -r1.w, r0.z, r0.x
  mad r0.z, cb0[0].w, l(0.433500), l(37.165001)
  sincos null, r0.z, r0.z
  sincos r1.w, null, r4.z
  mad r4.x, r4.y, l(0.100000), l(-0.787500)
  mad r4.z, r0.z, l(0.100000), l(-1.387500)
  mov r4.yw, l(0,-0.600000,0,-0.350000)
  max r2.zw, r4.zzzw, r4.xxxy
  mad r4.x, r0.y, l(0.100000), l(-0.612500)
  mad r4.z, r1.w, l(0.090000), l(-0.712500)
  mov r4.yw, l(0,-0.600000,0,-0.350000)
  min r0.yz, r4.zzwz, r4.xxyx
  add r0.yz, r0.yyzy, r2.zzwz
  mad r0.yz, -r0.yyzy, l(0.000000, 0.500000, 0.500000, 0.000000), r2.xxyx
  add r0.yz, |r0.yyzy|, l(0.000000, -0.040000, -0.125000, 0.000000)
  max r2.xy, r0.yzyy, l(0.000000, 0.000000, 0.000000, 0.000000)
  dp2 r1.w, r2.xyxx, r2.xyxx
  sqrt r1.w, r1.w
  max r0.y, r0.z, r0.y
  min r0.y, r0.y, l(0.000000)
  add r0.y, r0.y, r1.w
  add r0.y, r0.y, l(0.075000)
  mad r0.z, r0.y, l(10.000000), l(0.500000)
  min r0.z, r0.z, l(1.000000)
  mad r0.y, r0.z, -r0.y, r0.y
  mul r1.w, r0.z, l(0.050000)
  add r0.z, -r0.z, l(1.000000)
  mad r0.y, -r1.w, r0.z, r0.y
  min r0.xy, r0.xyxx, r0.xyxx
  min r0.x, r0.y, r0.x
  add r0.xy, r0.xxxx, l(-0.074900, -0.075000, 0.000000, 0.000000)
  mul_sat r0.x, r0.x, l(9999.831055)
  mad r0.z, r0.x, l(-2.000000), l(3.000000)
  mul r0.x, r0.x, r0.x
  mad r0.x, -r0.z, r0.x, l(1.000000)
  add r2.xyz, -r3.xyzx, l(0.000000, 0.000000, 0.200000, 0.000000)
  mad r2.xyz, r0.xxxx, r2.xyzx, r3.xyzx
  mul r0.x, |r0.y|, l(100.000000)
  min r0.x, r0.x, l(1.000000)
  mad r0.y, r0.x, l(-2.000000), l(3.000000)
  mul r0.x, r0.x, r0.x
  mad r0.x, -r0.y, r0.x, l(1.000000)
  add r1.xyz, r0.xxxx, r2.xyzx
endif 
mul r0.x, r0.w, r0.w
mad r0.xyz, r0.xxxx, r0.wwww, r1.xyzx
mul r0.w, r0.x, l(0.500000)
mad r0.yz, -r0.xxxx, l(0.000000, 0.500000, 0.500000, 0.000000), r0.yyzy
mad o0.xyz, r0.xyzx, l(0.350000, 0.700000, 0.700000, 0.000000), r0.wwww
mov o0.w, l(1.000000)
mov o1.xyzw, l(0,0,0,0)
ret 
// Approximately 123 instruction slots used
