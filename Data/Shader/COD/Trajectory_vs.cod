//
// Generated by Microsoft (R) HLSL Shader Compiler 10.1
//
//
// Buffer Definitions: 
//
// cbuffer CONSTANT_BUFFER
// {
//
//   row_major float4x4 world_view_projection;// Offset:    0 Size:    64 [unused]
//   row_major float4x4 world;          // Offset:   64 Size:    64
//   float4 material_color;             // Offset:  128 Size:    16 [unused]
//   float4 EyePos;                     // Offset:  144 Size:    16
//   row_major float4x4 view;           // Offset:  160 Size:    64
//   row_major float4x4 projection;     // Offset:  224 Size:    64
//   float3 at;                         // Offset:  288 Size:    12
//   float dummy;                       // Offset:  300 Size:     4 [unused]
//   float4 dummy2;                     // Offset:  304 Size:    16 [unused]
//
// }
//
//
// Resource Bindings:
//
// Name                                 Type  Format         Dim      HLSL Bind  Count
// ------------------------------ ---------- ------- ----------- -------------- ------
// CONSTANT_BUFFER                   cbuffer      NA          NA            cb0      1 
//
//
//
// Input signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// POSITION                 0   xyz         0     NONE   float   xyz 
// TEXCOORD                 0   xy          1     NONE   float   xy  
// ALPHA                    0   x           2     NONE   float   x   
//
//
// Output signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_POSITION              0   xyzw        0      POS   float   xyzw
// TEXCOORD                 0   xy          1     NONE   float   xy  
// ALPHA                    0     z         1     NONE   float     z 
//
vs_5_0
dcl_globalFlags refactoringAllowed | skipOptimization
dcl_constantbuffer CB0[19], immediateIndexed
dcl_input v0.xyz
dcl_input v1.xy
dcl_input v2.x
dcl_output_siv o0.xyzw, position
dcl_output o1.xy
dcl_output o1.z
dcl_temps 9
//
// Initial variable locations:
//   v0.x <- input.position.x; v0.y <- input.position.y; v0.z <- input.position.z; 
//   v1.x <- input.tex.x; v1.y <- input.tex.y; 
//   v2.x <- input.alpha; 
//   o1.x <- <main return value>.tex.x; o1.y <- <main return value>.tex.y; o1.z <- <main return value>.alpha; 
//   o0.x <- <main return value>.position.x; o0.y <- <main return value>.position.y; o0.z <- <main return value>.position.z; o0.w <- <main return value>.position.w
//
#line 36 "D:\ゲーム制作\YRProject\SourceCode\Shader\Trajectory\Trajectory_vs.hlsl"
mov r0.xyz, v0.xyzx  // r0.x <- P.x; r0.y <- P.y; r0.z <- P.z
mov r0.w, l(1.000000)  // r0.w <- P.w

#line 38
nop 
mov r0.xyzw, r0.xyzw

#line 5
mov r1.xyz, cb0[9].xyzx  // r1.x <- E.x; r1.y <- E.y; r1.z <- E.z

#line 7
mul r2.xyz, r0.xxxx, cb0[4].xyzx
mul r3.xyz, r0.yyyy, cb0[5].xyzx
add r2.xyz, r2.xyzx, r3.xyzx
mul r3.xyz, r0.zzzz, cb0[6].xyzx
add r2.xyz, r2.xyzx, r3.xyzx
mul r3.xyz, r0.wwww, cb0[7].xyzx
add r2.xyz, r2.xyzx, r3.xyzx  // r2.x <- wPOS.x; r2.y <- wPOS.y; r2.z <- wPOS.z

#line 8
mov r3.xyz, -r1.xyzx
add r3.xyz, r2.xyzx, r3.xyzx
dp3 r1.w, cb0[18].xyzx, r3.xyzx
mul r3.xyz, r1.wwww, cb0[18].xyzx
add r3.xyz, r1.xyzx, r3.xyzx  // r3.x <- P.x; r3.y <- P.y; r3.z <- P.z

#line 9
mov r1.xyz, -r1.xyzx
add r1.xyz, r1.xyzx, r3.xyzx
dp3 r1.x, r1.xyzx, r1.xyzx
sqrt r1.x, r1.x  // r1.x <- len

#line 10
mov r1.yzw, -r3.xxyz
add r1.yzw, r1.yyzw, r2.xxyz
dp3 r1.y, r1.yzwy, r1.yzwy
sqrt r1.y, r1.y
div r1.x, r1.y, r1.x  // r1.x <- h

#line 11
max r1.z, r1.x, l(0.050000)  // r1.z <- h

#line 14
itof r2.xyzw, l(1, 0, 0, 0)  // r2.x <- Mat._m00; r2.y <- Mat._m10; r2.z <- Mat._m20; r2.w <- Mat._m30
itof r3.xyzw, l(0, 1, 0, 0)  // r3.x <- Mat._m01; r3.y <- Mat._m11; r3.z <- Mat._m21; r3.w <- Mat._m31
itof r4.xyzw, l(0, 0, 0, 1)  // r4.x <- Mat._m03; r4.y <- Mat._m13; r4.z <- Mat._m23; r4.w <- Mat._m33
itof r1.xyw, l(0, 0, 0, 0)  // r1.x <- Mat._m02; r1.y <- Mat._m12; r1.w <- Mat._m32
mov r1.z, r1.z  // r1.z <- Mat._m22

#line 21
dp4 r5.x, cb0[4].xyzw, r2.xyzw  // r5.x <- newWorld._m00
dp4 r6.x, cb0[4].xyzw, r3.xyzw  // r6.x <- newWorld._m01
dp4 r7.x, cb0[4].xyzw, r1.xyzw  // r7.x <- newWorld._m02
dp4 r8.x, cb0[4].xyzw, r4.xyzw  // r8.x <- newWorld._m03
dp4 r5.y, cb0[5].xyzw, r2.xyzw  // r5.y <- newWorld._m10
dp4 r6.y, cb0[5].xyzw, r3.xyzw  // r6.y <- newWorld._m11
dp4 r7.y, cb0[5].xyzw, r1.xyzw  // r7.y <- newWorld._m12
dp4 r8.y, cb0[5].xyzw, r4.xyzw  // r8.y <- newWorld._m13
dp4 r5.z, cb0[6].xyzw, r2.xyzw  // r5.z <- newWorld._m20
dp4 r6.z, cb0[6].xyzw, r3.xyzw  // r6.z <- newWorld._m21
dp4 r7.z, cb0[6].xyzw, r1.xyzw  // r7.z <- newWorld._m22
dp4 r8.z, cb0[6].xyzw, r4.xyzw  // r8.z <- newWorld._m23
dp4 r5.w, cb0[7].xyzw, r2.xyzw  // r5.w <- newWorld._m30
dp4 r6.w, cb0[7].xyzw, r3.xyzw  // r6.w <- newWorld._m31
dp4 r7.w, cb0[7].xyzw, r1.xyzw  // r7.w <- newWorld._m32
dp4 r8.w, cb0[7].xyzw, r4.xyzw  // r8.w <- newWorld._m33

#line 22
dp4 r1.x, r0.xyzw, r5.xyzw  // r1.x <- Posi.x
dp4 r1.y, r0.xyzw, r6.xyzw  // r1.y <- Posi.y
dp4 r1.z, r0.xyzw, r7.xyzw  // r1.z <- Posi.z
dp4 r0.x, r0.xyzw, r8.xyzw  // r0.x <- Posi.w

#line 23
mul r2.xyzw, r1.xxxx, cb0[10].xyzw
mul r3.xyzw, r1.yyyy, cb0[11].xyzw
add r2.xyzw, r2.xyzw, r3.xyzw
mul r1.xyzw, r1.zzzz, cb0[12].xyzw
add r1.xyzw, r1.xyzw, r2.xyzw
mul r0.xyzw, r0.xxxx, cb0[13].xyzw
add r0.xyzw, r0.xyzw, r1.xyzw  // r0.x <- Posi.x; r0.y <- Posi.y; r0.z <- Posi.z; r0.w <- Posi.w

#line 24
mul r1.xyzw, r0.xxxx, cb0[14].xyzw
mul r2.xyzw, r0.yyyy, cb0[15].xyzw
add r1.xyzw, r1.xyzw, r2.xyzw
mul r2.xyzw, r0.zzzz, cb0[16].xyzw
add r1.xyzw, r1.xyzw, r2.xyzw
mul r0.xyzw, r0.wwww, cb0[17].xyzw
add r0.xyzw, r0.xyzw, r1.xyzw  // r0.x <- Posi.x; r0.y <- Posi.y; r0.z <- Posi.z; r0.w <- Posi.w

#line 25
div r0.xyzw, r0.xyzw, r0.wwww

#line 27
mov r0.xyzw, r0.xyzw  // r0.x <- <MatPos return value>.x; r0.y <- <MatPos return value>.y; r0.z <- <MatPos return value>.z; r0.w <- <MatPos return value>.w

#line 38
mov r0.xyzw, r0.xyzw  // r0.x <- output.position.x; r0.y <- output.position.y; r0.z <- output.position.z; r0.w <- output.position.w

#line 39
mov r1.xy, v1.xyxx  // r1.x <- output.tex.x; r1.y <- output.tex.y

#line 40
mov r1.z, v2.x  // r1.z <- output.alpha

#line 41
mov o0.xyzw, r0.xyzw
mov o1.xy, r1.xyxx
mov o1.z, r1.z
ret 
// Approximately 75 instruction slots used
