//
// Generated by Microsoft (R) HLSL Shader Compiler 10.1
//
//
// Buffer Definitions: 
//
// cbuffer CONSTANT_BUFFER
// {
//
//   float3 iResolution;                // Offset:    0 Size:    12
//   float iTime;                       // Offset:   12 Size:     4
//   float brightness;                  // Offset:   16 Size:     4 [unused]
//   float ray_brightness;              // Offset:   20 Size:     4 [unused]
//   float gamma;                       // Offset:   24 Size:     4 [unused]
//   float spot_brightness;             // Offset:   28 Size:     4 [unused]
//   float ray_density;                 // Offset:   32 Size:     4 [unused]
//   float curvature;                   // Offset:   36 Size:     4 [unused]
//   float red;                         // Offset:   40 Size:     4 [unused]
//   float green;                       // Offset:   44 Size:     4 [unused]
//   float blue;                        // Offset:   48 Size:     4 [unused]
//   float4 material_color;             // Offset:   64 Size:    16 [unused]
//   float dummy1;                      // Offset:   80 Size:     4 [unused]
//   float dummy2;                      // Offset:   84 Size:     4 [unused]
//   float dummy3;                      // Offset:   88 Size:     4 [unused]
//
// }
//
//
// Resource Bindings:
//
// Name                                 Type  Format         Dim      HLSL Bind  Count
// ------------------------------ ---------- ------- ----------- -------------- ------
// CONSTANT_BUFFER                   cbuffer      NA          NA            cb0      1 
//
//
//
// Input signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_POSITION              0   xyzw        0      POS   float   xy  
// TEXCOORD                 0   xy          1     NONE   float       
//
//
// Output signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_TARGET                0   xyzw        0   TARGET   float   xyzw
// SV_TARGET                1   xyzw        1   TARGET   float   xyzw
//
ps_5_0
dcl_globalFlags refactoringAllowed
dcl_constantbuffer CB0[1], immediateIndexed
dcl_input_ps_siv linear noperspective v0.xy, position
dcl_output o0.xyzw
dcl_output o1.xyzw
dcl_temps 13
add r0.x, -v0.y, cb0[0].y
add r0.x, -r0.x, cb0[0].y
mul r0.yz, cb0[0].wwww, l(0.000000, 0.293215, 0.460767, 0.000000)
sincos r0.yzw, null, r0.yyzy
mul r1.xy, r0.ywyy, l(10.000000, 0.500000, 0.000000, 0.000000)
mad r0.w, cb0[0].w, l(8.000000), l(75.000000)
mad r0.yz, r0.yyzy, l(0.000000, 10.000000, 0.500000, 0.000000), l(0.000000, 75.000000, 0.500000, 0.000000)
mov r2.x, r1.x
mov r2.y, l(50.000000)
mul r2.z, cb0[0].w, l(8.000000)
add r1.xzw, r2.xxyz, l(75.500000, 0.000000, 0.500000, 75.500000)
div r2.x, v0.x, cb0[0].y
add r2.y, -cb0[0].y, cb0[0].x
mul r2.y, r2.y, l(0.500000)
div r2.y, r2.y, cb0[0].y
mul r2.y, r2.y, l(5.000000)
mad r2.x, r2.x, l(5.000000), -r2.y
add r2.x, r2.x, l(-2.500000)
div r0.x, r0.x, cb0[0].y
add r0.x, -r0.x, l(0.500000)
mul r0.x, r0.x, l(5.000000)
sincos r3.x, r4.x, r1.y
sincos r5.x, r6.x, r0.z
mul r0.z, r3.x, r6.x
mul r0.z, -r0.z, r0.x
mad r0.z, r2.x, r4.x, r0.z
mul r1.y, r3.x, r5.x
mad r7.x, r1.y, l(3.000000), r0.z
mul r0.z, r4.x, r6.x
mul r0.z, r0.z, r0.x
mad r0.z, r2.x, r3.x, r0.z
mul r1.y, r4.x, r5.x
mad r7.y, -r1.y, l(3.000000), r0.z
mul r0.z, r6.x, l(3.000000)
mad r7.z, r0.x, r5.x, r0.z
mul r2.xyzw, r7.yyyy, l(0.400000, 0.034510, 0.134902, 0.202353)
round_ni r3.xyz, r1.xzwx
lt r4.xyz, l(0.000000, 0.000000, 0.000000, 0.000000), r7.xyzx
lt r5.xyz, r7.xyzx, l(0.000000, 0.000000, 0.000000, 0.000000)
iadd r5.xyz, -r4.xyzx, r5.xyzx
itof r5.xyz, r5.xyzx
ne r6.xyz, r7.xyzx, l(0.000000, 0.000000, 0.000000, 0.000000)
mov_sat r8.xyz, r5.xyzx
movc r4.xyz, r4.xyzx, l(0,2,4,0), l(1,3,5,0)
mov r9.xyz, r2.yzwy
mov r10.xyz, r1.xzwx
mov r0.xz, r3.xxyx
mov r1.y, r3.z
mov r3.w, l(0)
mov r4.w, l(0)
mov r5.w, l(0)
loop 
  ge r6.w, r5.w, l(100.000000)
  breakc_nz r6.w
  if_nz r4.w
    add r6.w, r5.w, l(1.000000)
    mov r4.w, l(0)
    mov r5.w, r6.w
    continue 
  endif 
  lt r6.w, r0.z, l(1.000000)
  ge r7.w, r0.z, l(60.000000)
  or r6.w, r6.w, r7.w
  if_nz r6.w
    mov r9.xyz, r2.yzwy
    break 
  endif 
  mul r6.w, r0.x, l(0.006667)
  ge r7.w, r6.w, -r6.w
  frc r6.w, |r6.w|
  movc r11.x, r7.w, r6.w, -r6.w
  mul r6.w, r0.z, l(0.006667)
  ge r7.w, r6.w, -r6.w
  frc r6.w, |r6.w|
  movc r6.w, r7.w, r6.w, -r6.w
  mul r7.w, r1.y, l(0.006667)
  ge r8.w, r7.w, -r7.w
  frc r7.w, |r7.w|
  movc r11.y, r8.w, r7.w, -r7.w
  mul r6.w, r6.w, l(3.000000)
  mul r11.zw, r11.xxxy, l(0.000000, 0.000000, 1.500000, 1.500000)
  dp2 r7.w, r11.zwzz, l(25.525400, -15.525400, 0.000000, 0.000000)
  sincos r7.w, null, r7.w
  mul r8.w, r7.w, l(52352.324219)
  round_ni r8.w, r8.w
  mad r7.w, r7.w, l(52352.324219), -r8.w
  mul r8.w, r11.x, l(75.000000)
  mul r9.w, r11.y, l(75.000000)
  mad r9.w, r11.x, l(15.000000), -r9.w
  mad r9.w, cb0[0].w, l(0.200000), r9.w
  sincos r9.w, null, r9.w
  mad r7.w, r9.w, l(0.100000), r7.w
  mad r8.w, r11.y, l(45.000000), r8.w
  mad r8.w, cb0[0].w, l(0.400000), r8.w
  sincos null, r8.w, r8.w
  mad r7.w, r8.w, l(0.100000), r7.w
  mad r8.w, r11.x, l(150.000000), -r0.y
  add r8.w, r8.w, l(75.000000)
  mul r8.w, r8.w, l(0.006667)
  ge r9.w, r8.w, -r8.w
  frc r8.w, |r8.w|
  movc r8.w, r9.w, r8.w, -r8.w
  mul r9.w, r8.w, l(150.000000)
  lt r10.w, r8.w, l(0.000000)
  mad r8.w, r8.w, l(150.000000), l(150.000000)
  movc r8.w, r10.w, r8.w, r9.w
  add r12.x, r8.w, l(-75.000000)
  mad r8.w, r11.y, l(150.000000), -r0.w
  add r8.w, r8.w, l(75.000000)
  mul r8.w, r8.w, l(0.006667)
  ge r9.w, r8.w, -r8.w
  frc r8.w, |r8.w|
  movc r8.w, r9.w, r8.w, -r8.w
  mul r9.w, r8.w, l(150.000000)
  lt r10.w, r8.w, l(0.000000)
  mad r8.w, r8.w, l(150.000000), l(150.000000)
  movc r8.w, r10.w, r8.w, r9.w
  add r12.y, r8.w, l(-75.000000)
  dp2 r8.w, r12.xyxx, r12.xyxx
  sqrt r8.w, r8.w
  mad r8.w, r8.w, l(0.100000), l(0.870000)
  min r7.w, r7.w, r8.w
  ge r6.w, r6.w, r7.w
  if_z r6.w
    add r11.xyz, -r1.xzwx, r10.xyzx
    dp3 r6.w, r11.xyzx, r11.xyzx
    sqrt r6.w, r6.w
    mad r6.w, -r6.w, l(0.016667), l(1.000000)
    max r6.w, r6.w, l(0.000000)
    itof r7.w, r3.w
    add r7.w, r7.w, l(5.000000)
    mul r7.w, r7.w, l(0.700000)
    frc r7.w, r7.w
    mad r7.w, r7.w, l(0.800000), l(0.200000)
    mul r8.w, r6.w, r7.w
    mad r6.w, -r6.w, r7.w, l(1.000000)
    mul r6.w, r2.x, r6.w
    mad r11.xyz, r6.wwww, l(0.086275, 0.337255, 0.505882, 0.000000), r8.wwww
    mov r9.xyz, r11.xyzx
    break 
  endif 
  if_nz r6.x
    add r6.w, r8.x, r0.x
    add r6.w, -r10.x, r6.w
    div r6.w, r6.w, r7.x
    mad r11.xyz, r7.yzxy, r6.wwww, r10.yzxy
    ge r6.w, r11.x, r0.z
    add r7.w, r0.z, l(1.000000)
    ge r7.w, r7.w, r11.x
    and r6.w, r6.w, r7.w
    ge r7.w, r11.y, r1.y
    and r6.w, r6.w, r7.w
    add r7.w, r1.y, l(1.000000)
    ge r7.w, r7.w, r11.y
    and r6.w, r6.w, r7.w
    if_nz r6.w
      add r7.w, r5.x, r0.x
      add r8.w, r5.w, l(1.000000)
      mov r3.w, r4.x
      mov r4.w, l(-1)
      mov r10.xyz, r11.zxyz
      mov r0.x, r7.w
      mov r5.w, r8.w
      continue 
    endif 
    mov r4.w, r6.w
  else 
    mov r4.w, l(0)
  endif 
  if_nz r6.y
    add r6.w, r8.y, r0.z
    add r6.w, -r10.y, r6.w
    div r6.w, r6.w, r7.y
    mad r11.xyz, r7.yzxy, r6.wwww, r10.yzxy
    ge r6.w, r11.z, r0.x
    add r7.w, r0.x, l(1.000000)
    ge r7.w, r7.w, r11.z
    and r6.w, r6.w, r7.w
    ge r7.w, r11.y, r1.y
    and r6.w, r6.w, r7.w
    add r7.w, r1.y, l(1.000000)
    ge r7.w, r7.w, r11.y
    and r6.w, r6.w, r7.w
    if_nz r6.w
      add r6.w, r5.y, r0.z
      add r7.w, r5.w, l(1.000000)
      mov r3.w, r4.y
      mov r4.w, l(-1)
      mov r10.xyz, r11.zxyz
      mov r0.z, r6.w
      mov r5.w, r7.w
      continue 
    endif 
  endif 
  if_nz r6.z
    add r6.w, r8.z, r1.y
    add r6.w, -r10.z, r6.w
    div r6.w, r6.w, r7.z
    mad r11.xyz, r7.yzxy, r6.wwww, r10.yzxy
    ge r6.w, r11.x, r0.z
    add r7.w, r0.z, l(1.000000)
    ge r7.w, r7.w, r11.x
    and r6.w, r6.w, r7.w
    ge r7.w, r11.z, r0.x
    and r6.w, r6.w, r7.w
    add r7.w, r0.x, l(1.000000)
    ge r7.w, r7.w, r11.z
    and r6.w, r6.w, r7.w
    if_nz r6.w
      add r6.w, r5.z, r1.y
      add r7.w, r5.w, l(1.000000)
      mov r3.w, r4.z
      mov r4.w, l(-1)
      mov r10.xyz, r11.zxyz
      mov r1.y, r6.w
      mov r5.w, r7.w
      continue 
    endif 
  endif 
  add r5.w, r5.w, l(1.000000)
endloop 
add r0.xyz, -r1.xzwx, r10.xyzx
dp3 r0.x, r0.xyzx, r0.xyzx
sqrt r0.x, r0.x
mad r0.x, -r0.x, l(0.014286), l(1.000000)
mul_sat o0.xyz, r0.xxxx, r9.xyzx
mov o0.w, l(1.000000)
mov o1.xyzw, l(0,0,0,0)
ret 
// Approximately 229 instruction slots used
