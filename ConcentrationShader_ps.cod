//
// Generated by Microsoft (R) HLSL Shader Compiler 10.1
//
//
// Buffer Definitions: 
//
// cbuffer CONSTANT_BUFFER
// {
//
//   float3 iResolution;                // Offset:    0 Size:    12
//   float iTime;                       // Offset:   12 Size:     4
//   float brightness;                  // Offset:   16 Size:     4 [unused]
//   float ray_brightness;              // Offset:   20 Size:     4 [unused]
//   float gamma;                       // Offset:   24 Size:     4 [unused]
//   float spot_brightness;             // Offset:   28 Size:     4 [unused]
//   float ray_density;                 // Offset:   32 Size:     4 [unused]
//   float curvature;                   // Offset:   36 Size:     4 [unused]
//   float red;                         // Offset:   40 Size:     4 [unused]
//   float green;                       // Offset:   44 Size:     4 [unused]
//   float blue;                        // Offset:   48 Size:     4 [unused]
//   float4 material_color;             // Offset:   64 Size:    16 [unused]
//   float dummy1;                      // Offset:   80 Size:     4 [unused]
//   float dummy2;                      // Offset:   84 Size:     4 [unused]
//   float dummy3;                      // Offset:   88 Size:     4 [unused]
//
// }
//
//
// Resource Bindings:
//
// Name                                 Type  Format         Dim      HLSL Bind  Count
// ------------------------------ ---------- ------- ----------- -------------- ------
// linear_clamp                      sampler      NA          NA             s0      1 
// iChannel0                         texture  float4          2d             t0      1 
// CONSTANT_BUFFER                   cbuffer      NA          NA            cb0      1 
//
//
//
// Input signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_POSITION              0   xyzw        0      POS   float   xy  
// TEXCOORD                 0   xy          1     NONE   float       
//
//
// Output signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_TARGET                0   xyzw        0   TARGET   float   xyzw
// SV_TARGET                1   xyzw        1   TARGET   float   xyzw
//
ps_5_0
dcl_globalFlags refactoringAllowed | skipOptimization
dcl_constantbuffer CB0[1], immediateIndexed
dcl_sampler s0, mode_default
dcl_resource_texture2d (float,float,float,float) t0
dcl_input_ps_siv linear noperspective v0.xy, position
dcl_output o0.xyzw
dcl_output o1.xyzw
dcl_temps 5
//
// Initial variable locations:
//   v0.x <- pin.position.x; v0.y <- pin.position.y; v0.z <- pin.position.z; v0.w <- pin.position.w; 
//   v1.x <- pin.fragCoord.x; v1.y <- pin.fragCoord.y; 
//   o1.x <- <main return value>.Luminance.x; o1.y <- <main return value>.Luminance.y; o1.z <- <main return value>.Luminance.z; o1.w <- <main return value>.Luminance.w; 
//   o0.x <- <main return value>.Color.x; o0.y <- <main return value>.Color.y; o0.z <- <main return value>.Color.z; o0.w <- <main return value>.Color.w
//
#line 78 "D:\ゲーム制作\YRProject\ConcentrationShader_ps.hlsl"
mov r0.xy, v0.xyxx  // r0.x <- fragCoord.x; r0.y <- fragCoord.y

#line 80
mov r0.z, -r0.y
add r0.y, r0.z, cb0[0].y

#line 82
nop 
mov r0.x, r0.x
mov r0.y, r0.y

#line 56
mul r0.zw, r0.xxxy, l(0.000000, 0.000000, 2.000000, 2.000000)
mov r1.xy, -cb0[0].xyxx
add r0.zw, r0.zzzw, r1.xxxy
div r0.zw, r0.zzzw, cb0[0].xxxy  // r0.z <- uv.x; r0.w <- uv.y

#line 60
dp2 r1.x, r0.zwzz, r0.zwzz
sqrt r1.x, r1.x
mul r1.x, r1.x, l(0.100000)
div r1.y, cb0[0].w, l(0.050000)
round_ni r1.y, r1.y
mul r1.y, r1.y, l(0.050000)
mul r1.y, r1.y, l(10.000000)
add r1.x, r1.y, r1.x  // r1.x <- puv.x
mov r1.z, -r0.w
max r1.z, r0.w, r1.z
mov r1.w, -r0.z
max r2.x, r0.z, r1.w
min r2.y, r1.z, r2.x
max r2.z, r1.z, r2.x
div r2.z, l(1.000000, 1.000000, 1.000000, 1.000000), r2.z
mul r2.y, r2.z, r2.y
mul r2.z, r2.y, r2.y
mul r2.w, r2.z, l(0.020835)
add r2.w, r2.w, l(-0.085133)
mul r2.w, r2.w, r2.z
add r2.w, r2.w, l(0.180141)
mul r2.w, r2.w, r2.z
add r2.w, r2.w, l(-0.330299)
mul r2.z, r2.w, r2.z
add r2.z, r2.z, l(0.999866)
mul r2.y, r2.z, r2.y
lt r1.z, r2.x, r1.z
mul r2.x, r2.y, l(-2.000000)
add r2.x, r2.x, l(1.570796)
and r1.z, r1.z, r2.x
add r1.z, r2.y, r1.z
lt r1.w, r0.z, r1.w
and r1.w, r1.w, l(0xc0490fdb)
add r1.z, r1.w, r1.z
min r1.w, r0.z, r0.w
max r2.x, r0.z, r0.w
mov r2.y, -r1.w
lt r1.w, r1.w, r2.y
mov r2.y, -r2.x
ge r2.x, r2.x, r2.y
and r1.w, r1.w, r2.x
mov r2.x, -r1.z
movc r1.z, r1.w, r2.x, r1.z
mul r1.y, r1.z, l(10.000000)  // r1.y <- puv.y

#line 64
nop 
mov r1.xy, r1.xyxx

#line 41
mov r1.z, l(0)  // r1.z <- sum

#line 42
mov r1.w, l(1)  // r1.w <- i
mov r2.x, r1.z  // r2.x <- sum
mov r2.y, r1.w  // r2.y <- i
loop 
  ilt r2.z, r2.y, l(7)
  breakc_z r2.z

#line 43
  nop 
  itof r2.zw, r2.yyyy
  add r2.zw, r1.xxxy, r2.zzzw
  itof r3.x, r2.y
  log r3.y, l(2.000000)
  mul r3.x, r3.y, r3.x
  exp r3.x, r3.x
  mul r3.xy, r3.xxxx, l(2.000000, 2.000000, 0.000000, 0.000000)

#line 22
  nop 
  mul r3.zw, r2.zzzw, r3.xxxy
  add r3.zw, r3.zzzw, l(0.000000, 0.000000, 0.000000, 0.000000)
  round_ni r3.zw, r3.zzzw
  div r3.zw, r3.zzzw, r3.xxxy

#line 18
  dp2 r3.z, r3.zwzz, l(89.440002, 19.360001, 0.000000, 0.000000)
  sincos r3.z, null, r3.z
  mul r3.z, r3.z, l(22189.220703)
  frc r3.z, r3.z  // r3.z <- <hash return value>

#line 22
  nop 
  mul r4.xy, r2.zwzz, r3.xyxx
  add r4.xy, r4.xyxx, l(0.000000, 1.000000, 0.000000, 0.000000)
  round_ni r4.xy, r4.xyxx
  div r4.xy, r4.xyxx, r3.xyxx

#line 18
  dp2 r3.w, r4.xyxx, l(89.440002, 19.360001, 0.000000, 0.000000)
  sincos r3.w, null, r3.w
  mul r3.w, r3.w, l(22189.220703)
  frc r3.w, r3.w  // r3.w <- <hash return value>

#line 22
  nop 
  mul r4.xy, r2.zwzz, r3.xyxx
  add r4.xy, r4.xyxx, l(1.000000, 0.000000, 0.000000, 0.000000)
  round_ni r4.xy, r4.xyxx
  div r4.xy, r4.xyxx, r3.xyxx

#line 18
  dp2 r4.x, r4.xyxx, l(89.440002, 19.360001, 0.000000, 0.000000)
  sincos r4.x, null, r4.x
  mul r4.x, r4.x, l(22189.220703)
  frc r4.x, r4.x  // r4.x <- <hash return value>

#line 22
  nop 
  mul r4.yz, r2.zzwz, r3.xxyx
  add r4.yz, r4.yyzy, l(0.000000, 1.000000, 1.000000, 0.000000)
  round_ni r4.yz, r4.yyzy
  div r4.yz, r4.yyzy, r3.xxyx

#line 18
  dp2 r4.y, r4.yzyy, l(89.440002, 19.360001, 0.000000, 0.000000)
  sincos r4.y, null, r4.y
  mul r4.y, r4.y, l(22189.220703)
  frc r4.y, r4.y  // r4.y <- <hash return value>

#line 22
  mov r3.z, r3.z  // r3.z <- h.x
  mov r3.w, r3.w  // r3.w <- h.y
  mov r4.x, r4.x  // r4.x <- h.z
  mov r4.y, r4.y  // r4.y <- h.w

#line 28
  mul r2.zw, r2.zzzw, r3.xxxy
  div r2.zw, r2.zzzw, l(0.000000, 0.000000, 1.000000, 1.000000)
  mov r3.xy, -r2.zwzz
  max r4.zw, r2.zzzw, r3.xxxy
  ge r2.zw, r2.zzzw, r3.xxxy
  frc r3.xy, r4.zwzz
  mov r4.zw, -r3.xxxy
  movc r2.zw, r2.zzzw, r3.xxxy, r4.zzzw
  mul r2.zw, r2.zzzw, l(0.000000, 0.000000, 1.000000, 1.000000)
  mov r3.xy, l(-0.000000,-0.000000,-0.000000,-0.000000)
  add r4.zw, r3.xxxy, l(0.000000, 0.000000, 1.000000, 1.000000)
  add r2.zw, r2.zzzw, r3.xxxy
  div r3.xy, l(1.000000, 1.000000, 1.000000, 1.000000), r4.zwzz
  mul r2.zw, r2.zzzw, r3.xxxy
  max r2.zw, r2.zzzw, l(0.000000, 0.000000, 0.000000, 0.000000)
  min r2.zw, r2.zzzw, l(0.000000, 0.000000, 1.000000, 1.000000)
  mul r3.xy, r2.zwzz, l(-2.000000, -2.000000, 0.000000, 0.000000)
  add r3.xy, r3.xyxx, l(3.000000, 3.000000, 0.000000, 0.000000)
  mul r2.zw, r2.zzzw, r2.zzzw
  mul r2.zw, r2.zzzw, r3.xxxy  // r2.z <- ip.x; r2.w <- ip.y

#line 33
  mov r3.x, -r3.z
  add r3.x, r3.x, r3.w
  mul r3.x, r2.w, r3.x
  add r3.x, r3.x, r3.z
  mov r3.y, -r4.x
  add r3.y, r3.y, r4.y
  mul r2.w, r2.w, r3.y
  add r2.w, r2.w, r4.x
  mov r3.y, -r3.x
  add r2.w, r2.w, r3.y
  mul r2.z, r2.w, r2.z
  add r2.z, r2.z, r3.x  // r2.z <- <iHash return value>

#line 43
  itof r2.w, r2.y
  log r3.x, l(2.000000)
  mul r2.w, r2.w, r3.x
  exp r2.w, r2.w
  div r2.z, r2.z, r2.w
  add r2.x, r2.z, r2.x

#line 47
  iadd r2.y, r2.y, l(1)
endloop 

#line 48
mov r2.x, r2.x  // r2.x <- <noise return value>

#line 64
mov r2.x, r2.x  // r2.x <- value

#line 65
dp2 r0.z, r0.zwzz, r0.zwzz
sqrt r0.z, r0.z
mov r0.w, l(-1.300000)
add r0.z, r0.w, r0.z
mov r0.w, l(-0.500000)
add r0.w, r0.w, r2.x
mul r0.w, r0.w, l(2.000000)
mov r0.w, -r0.w
add r0.z, r0.w, r0.z  // r0.z <- value

#line 66
mov r0.w, l(0.100000)
add r1.x, r0.w, l(0.100000)
add r0.z, r0.w, r0.z
div r0.w, l(1.000000, 1.000000, 1.000000, 1.000000), r1.x
mul r0.z, r0.w, r0.z
max r0.z, r0.z, l(0.000000)
min r0.z, r0.z, l(1.000000)
mul r0.w, r0.z, l(-2.000000)
add r0.w, r0.w, l(3.000000)
mul r0.z, r0.z, r0.z
mul r0.z, r0.z, r0.w  // r0.z <- value

#line 68
nop 
nop 
nop 
div r0.xy, r0.xyxx, cb0[0].xyxx

#line 52
mov r0.w, l(-0.500000)
add r0.x, r0.w, r0.x
mul r0.x, r0.x, cb0[0].z
add r1.x, r0.x, l(0.500000)  // r1.x <- <getuv return value>.x
mov r0.x, -r0.y
add r1.y, r0.x, l(1.000000)  // r1.y <- <getuv return value>.y

#line 68
mov r1.xy, r1.xyxx

#line 9 "D:\ゲーム制作\YRProject\ShaderToy.hlsli"
sample_indexable(texture2d)(float,float,float,float) r0.xyw, r1.xyxx, t0.xywz, s0
mov r0.xyw, r0.xyxw  // r0.x <- <Sample return value>.x; r0.y <- <Sample return value>.y; r0.w <- <Sample return value>.z

#line 68 "D:\ゲーム制作\YRProject\ConcentrationShader_ps.hlsl"
mov r0.xyw, r0.xyxw  // r0.x <- tex.x; r0.y <- tex.y; r0.w <- tex.z

#line 69
mov r1.xyz, -r0.xywx
add r1.xyz, r1.xyzx, l(1.000000, 1.000000, 1.000000, 0.000000)
mul r1.xyz, r0.zzzz, r1.xyzx
add r0.xyz, r0.xywx, r1.xyzx  // r0.x <- color.x; r0.y <- color.y; r0.z <- color.z

#line 70
mov r0.xyz, r0.xyzx  // r0.x <- fragColor.x; r0.y <- fragColor.y; r0.z <- fragColor.z
mov r0.w, l(1.000000)  // r0.w <- fragColor.w

#line 82
mov r0.xyzw, r0.xyzw  // r0.x <- fragColor.x; r0.y <- fragColor.y; r0.z <- fragColor.z; r0.w <- fragColor.w

#line 84
mov r0.xyzw, r0.xyzw  // r0.x <- Out.Color.x; r0.y <- Out.Color.y; r0.z <- Out.Color.z; r0.w <- Out.Color.w

#line 85
mov r1.xyzw, l(0,0,0,0)  // r1.x <- Out.Luminance.x; r1.y <- Out.Luminance.y; r1.z <- Out.Luminance.z; r1.w <- Out.Luminance.w

#line 87
mov o0.xyzw, r0.xyzw
mov o1.xyzw, r1.xyzw
ret 
// Approximately 199 instruction slots used
