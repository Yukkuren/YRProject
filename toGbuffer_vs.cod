//
// Generated by Microsoft (R) HLSL Shader Compiler 10.1
//
//
// Buffer Definitions: 
//
// cbuffer CONSTANT_BUFFER
// {
//
//   row_major float4x4 world_view_projection;// Offset:    0 Size:    64
//   row_major float4x4 world;          // Offset:   64 Size:    64
//   float4 material_color;             // Offset:  128 Size:    16 [unused]
//
// }
//
// cbuffer CBPerFrame3
// {
//
//   float Offset_X;                    // Offset:    0 Size:     4
//   float Offset_Y;                    // Offset:    4 Size:     4
//   float dummy00;                     // Offset:    8 Size:     4 [unused]
//   float dummy01;                     // Offset:   12 Size:     4 [unused]
//
// }
//
//
// Resource Bindings:
//
// Name                                 Type  Format         Dim      HLSL Bind  Count
// ------------------------------ ---------- ------- ----------- -------------- ------
// CONSTANT_BUFFER                   cbuffer      NA          NA            cb0      1 
// CBPerFrame3                       cbuffer      NA          NA            cb3      1 
//
//
//
// Input signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// POSITION                 0   xyz         0     NONE   float   xyz 
// NORMAL                   0   xyz         1     NONE   float   xyz 
// TEXCOORD                 0   xy          2     NONE   float   xy  
// COLOR                    0   xyzw        3     NONE   float   xyzw
//
//
// Output signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_POSITION              0   xyzw        0      POS   float   xyzw
// COLOR                    0   xyzw        1     NONE   float   xyzw
// TEXCOORD                 1   xyz         2     NONE   float   xyz 
// TEXCOORD                 2   xyz         3     NONE   float   xyz 
// TEXCOORD                 3   xy          4     NONE   float   xy  
//
//
// Constant buffer to DX9 shader constant mappings:
//
// Target Reg Buffer  Start Reg # of Regs        Data Conversion
// ---------- ------- --------- --------- ----------------------
// c1         cb0             0         8  ( FLT, FLT, FLT, FLT)
// c9         cb3             0         1  ( FLT, FLT, FLT, FLT)
//
//
// Runtime generated constant mappings:
//
// Target Reg                               Constant Description
// ---------- --------------------------------------------------
// c0                              Vertex Shader position offset
//
//
// Level9 shader bytecode:
//
    vs_2_x
    def c10, 1, 0, 0, 0
    dcl_texcoord v0  // input<0,1,2>
    dcl_texcoord1 v1  // input<3,4,5>
    dcl_texcoord2 v2  // input<6,7>
    dcl_texcoord3 v3  // input<8,9,10,11>

#line 6 "E:\ゲーム制作\YRProject\toGbuffer_vs.hlsl"
    mov r0.xyz, v0  // ::P<0,1,2>
    mul r1, r0.x, c1
    mul r2, r0.y, c2
    add r1, r1, r2
    mul r2, r0.z, c3
    add r1, r1, r2
    mov r2.x, c10.x  // ::P<3>
    mul r3, r2.x, c4
    add r1, r1, r3  // ::Out<0,1,2,3>
    mul r2.yzw, r0.x, c5.xxyz
    mul r0.xyw, r0.y, c6.xyzz
    add r0.xyw, r0, r2.yzzw
    mul r2.yzw, r0.z, c7.xxyz
    add r0.xyz, r0.xyww, r2.yzww
    mul r2.xyz, r2.x, c8
    add r0.xyz, r0, r2  // ::wPos<0,1,2>
    mul r2, v1.x, c5
    mul r3, v1.y, c6
    add r2, r2, r3
    mul r3, v1.z, c7
    add r2, r2, r3
    dp4 r0.w, r2, r2
    rsq r0.w, r0.w
    mul r2.xyz, r0.w, r2  // ::wN<0,1,2>
    mov r2.xyz, r2  // ::Out<8,9,10>
    mov r0.xyz, r0  // ::Out<11,12,13>

#line 17
    mov r3, v3  // ::Out<4,5,6,7>

#line 20
    add r0.w, v2.x, c9.x  // ::Out<14>
    add r2.w, v2.y, c9.y  // ::Out<15>
    mov oT0, r3  // ::main<4,5,6,7>
    mov oT1.xyz, r2  // ::main<8,9,10>
    mov oT2.xyz, r0  // ::main<11,12,13>
    mov r1.xy, r1  // ::main<0,1>
    mov r1.zw, r1  // ::main<2,3>
    mov oT3.x, r0.w  // ::main<14>
    mov oT3.y, r2.w  // ::main<15>

#line 3
    mul r0.xy, r1.w, c0
    add oPos.xy, r0, r1  // ::main<0,1>
    mov oPos.zw, r1  // ::main<2,3>

// approximately 39 instruction slots used
vs_4_0
dcl_constantbuffer CB0[8], immediateIndexed
dcl_constantbuffer CB3[1], immediateIndexed
dcl_input v0.xyz
dcl_input v1.xyz
dcl_input v2.xy
dcl_input v3.xyzw
dcl_output_siv o0.xyzw, position
dcl_output o1.xyzw
dcl_output o2.xyz
dcl_output o3.xyz
dcl_output o4.xy
dcl_temps 4
//
// Initial variable locations:
//   v0.x <- input.position.x; v0.y <- input.position.y; v0.z <- input.position.z; 
//   v1.x <- input.normal.x; v1.y <- input.normal.y; v1.z <- input.normal.z; 
//   v2.x <- input.tex.x; v2.y <- input.tex.y; 
//   v3.x <- input.color.x; v3.y <- input.color.y; v3.z <- input.color.z; v3.w <- input.color.w; 
//   o4.x <- <main return value>.Tex.x; o4.y <- <main return value>.Tex.y; 
//   o3.x <- <main return value>.wPos.x; o3.y <- <main return value>.wPos.y; o3.z <- <main return value>.wPos.z; 
//   o2.x <- <main return value>.wNormal.x; o2.y <- <main return value>.wNormal.y; o2.z <- <main return value>.wNormal.z; 
//   o1.x <- <main return value>.color.x; o1.y <- <main return value>.color.y; o1.z <- <main return value>.color.z; o1.w <- <main return value>.color.w; 
//   o0.x <- <main return value>.Position.x; o0.y <- <main return value>.Position.y; o0.z <- <main return value>.Position.z; o0.w <- <main return value>.Position.w
//
#line 6 "E:\ゲーム制作\YRProject\toGbuffer_vs.hlsl"
mov r0.xyz, v0.xyzx  // r0.x <- P.x; r0.y <- P.y; r0.z <- P.z
mov r0.w, l(1.000000)  // r0.w <- P.w

#line 8
mul r1.xyzw, r0.xxxx, cb0[0].xyzw
mul r2.xyzw, r0.yyyy, cb0[1].xyzw
add r1.xyzw, r1.xyzw, r2.xyzw
mul r2.xyzw, r0.zzzz, cb0[2].xyzw
add r1.xyzw, r1.xyzw, r2.xyzw
mul r2.xyzw, r0.wwww, cb0[3].xyzw
add r1.xyzw, r1.xyzw, r2.xyzw  // r1.x <- Out.Position.x; r1.y <- Out.Position.y; r1.z <- Out.Position.z; r1.w <- Out.Position.w

#line 10
mul r2.xyz, r0.xxxx, cb0[4].xyzx
mul r3.xyz, r0.yyyy, cb0[5].xyzx
add r2.xyz, r2.xyzx, r3.xyzx
mul r0.xyz, r0.zzzz, cb0[6].xyzx
add r0.xyz, r0.xyzx, r2.xyzx
mul r2.xyz, r0.wwww, cb0[7].xyzx
add r0.xyz, r0.xyzx, r2.xyzx  // r0.x <- wPos.x; r0.y <- wPos.y; r0.z <- wPos.z

#line 12
mul r2.xyzw, v1.xxxx, cb0[4].xyzw
mul r3.xyzw, v1.yyyy, cb0[5].xyzw
add r2.xyzw, r2.xyzw, r3.xyzw
mul r3.xyzw, v1.zzzz, cb0[6].xyzw
add r2.xyzw, r2.xyzw, r3.xyzw
dp4 r0.w, r2.xyzw, r2.xyzw
rsq r0.w, r0.w
mul r2.xyz, r0.wwww, r2.xyzx  // r2.x <- wN.x; r2.y <- wN.y; r2.z <- wN.z

#line 13
mov r2.xyz, r2.xyzx  // r2.x <- Out.wNormal.x; r2.y <- Out.wNormal.y; r2.z <- Out.wNormal.z

#line 15
mov r0.xyz, r0.xyzx  // r0.x <- Out.wPos.x; r0.y <- Out.wPos.y; r0.z <- Out.wPos.z

#line 17
mov r3.xyzw, v3.xyzw  // r3.x <- Out.color.x; r3.y <- Out.color.y; r3.z <- Out.color.z; r3.w <- Out.color.w

#line 20
add r0.w, v2.x, cb3[0].x  // r0.w <- Out.Tex.x

#line 21
add r2.w, v2.y, cb3[0].y  // r2.w <- Out.Tex.y

#line 23
mov o0.xyzw, r1.xyzw
mov o1.xyzw, r3.xyzw
mov o2.xyz, r2.xyzx
mov o3.xyz, r0.xyzx
mov o4.x, r0.w
mov o4.y, r2.w
ret 
// Approximately 36 instruction slots used
