//
// Generated by Microsoft (R) HLSL Shader Compiler 10.1
//
//
// Buffer Definitions: 
//
// cbuffer CBPerMesh
// {
//
//   row_major float4x4 world_view_projection;// Offset:    0 Size:    64
//   row_major float4x4 world;          // Offset:   64 Size:    64
//   float4 material_color;             // Offset:  128 Size:    16 [unused]
//   float4 light_direction;            // Offset:  144 Size:    16 [unused]
//   float4 light_color;                // Offset:  160 Size:    16 [unused]
//   float4 ambient_color;              // Offset:  176 Size:    16 [unused]
//   row_major float4x4 bone_transforms[128];// Offset:  192 Size:  8192 [unused]
//
// }
//
// cbuffer CBPerFrame
// {
//
//   float4 LightColor;                 // Offset:    0 Size:    16 [unused]
//   float4 LightDir;                   // Offset:   16 Size:    16 [unused]
//   float4 AmbientColor;               // Offset:   32 Size:    16 [unused]
//   float4 EyePos;                     // Offset:   48 Size:    16 [unused]
//   float Density;                     // Offset:   64 Size:     4
//   float Distance;                    // Offset:   68 Size:     4
//   float dummy1;                      // Offset:   72 Size:     4 [unused]
//   float dummy2;                      // Offset:   76 Size:     4 [unused]
//
// }
//
//
// Resource Bindings:
//
// Name                                 Type  Format         Dim      HLSL Bind  Count
// ------------------------------ ---------- ------- ----------- -------------- ------
// CBPerMesh                         cbuffer      NA          NA            cb0      1 
// CBPerFrame                        cbuffer      NA          NA            cb2      1 
//
//
//
// Input signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_POSITION              0   xyzw        0      POS   float   xyzw
// NORMAL                   0   xyz         1     NONE   float   xyz 
// TEXCOORD                 0   xy          2     NONE   float   xy  
// COLOR                    0   xyzw        3     NONE   float   xyzw
// TEXCOORD                 2   xyz         4     NONE   float   xyz 
//
//
// Output signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_POSITION              0   xyzw        0      POS   float   xyzw
// TEXCOORD                 0   xy          1     NONE   float   xy  
// COLOR                    0   xyzw        2     NONE   float   xyzw
// TEXCOORD                 1   xyz         3     NONE   float   xyz 
// TEXCOORD                 2   xyz         4     NONE   float   xyz 
// NORMAL                   0   xyz         5     NONE   float   xyz 
//
gs_5_0
dcl_globalFlags refactoringAllowed | skipOptimization
dcl_constantbuffer CB0[7], immediateIndexed
dcl_constantbuffer CB2[5], immediateIndexed
dcl_input_siv v[3][0].xyzw, position
dcl_input v[3][1].xyz
dcl_input v[3][2].xy
dcl_input v[3][3].xyzw
dcl_input v[3][4].xyz
dcl_temps 8
dcl_inputprimitive triangle 
dcl_stream m0
dcl_outputtopology trianglestrip 
dcl_output_siv o0.xyzw, position
dcl_output o1.xy
dcl_output o2.xyzw
dcl_output o3.xyz
dcl_output o4.xyz
dcl_output o5.xyz
dcl_maxout 48
//
// Initial variable locations:
//   m0 <- Stream; 
//   v[0][0].x <- input[0].Position.x; v[0][0].y <- input[0].Position.y; v[0][0].z <- input[0].Position.z; v[0][0].w <- input[0].Position.w; 
//   v[0][1].x <- input[0].Normal.x; v[0][1].y <- input[0].Normal.y; v[0][1].z <- input[0].Normal.z; 
//   v[0][2].x <- input[0].Tex.x; v[0][2].y <- input[0].Tex.y; 
//   v[0][3].x <- input[0].Color.x; v[0][3].y <- input[0].Color.y; v[0][3].z <- input[0].Color.z; v[0][3].w <- input[0].Color.w; 
//   v[0][4].x <- input[0].wPos.x; v[0][4].y <- input[0].wPos.y; v[0][4].z <- input[0].wPos.z; 
//   v[1][0].x <- input[1].Position.x; v[1][0].y <- input[1].Position.y; v[1][0].z <- input[1].Position.z; v[1][0].w <- input[1].Position.w; 
//   v[1][1].x <- input[1].Normal.x; v[1][1].y <- input[1].Normal.y; v[1][1].z <- input[1].Normal.z; 
//   v[1][2].x <- input[1].Tex.x; v[1][2].y <- input[1].Tex.y; 
//   v[1][3].x <- input[1].Color.x; v[1][3].y <- input[1].Color.y; v[1][3].z <- input[1].Color.z; v[1][3].w <- input[1].Color.w; 
//   v[1][4].x <- input[1].wPos.x; v[1][4].y <- input[1].wPos.y; v[1][4].z <- input[1].wPos.z; 
//   v[2][0].x <- input[2].Position.x; v[2][0].y <- input[2].Position.y; v[2][0].z <- input[2].Position.z; v[2][0].w <- input[2].Position.w; 
//   v[2][1].x <- input[2].Normal.x; v[2][1].y <- input[2].Normal.y; v[2][1].z <- input[2].Normal.z; 
//   v[2][2].x <- input[2].Tex.x; v[2][2].y <- input[2].Tex.y; 
//   v[2][3].x <- input[2].Color.x; v[2][3].y <- input[2].Color.y; v[2][3].z <- input[2].Color.z; v[2][3].w <- input[2].Color.w; 
//   v[2][4].x <- input[2].wPos.x; v[2][4].y <- input[2].wPos.y; v[2][4].z <- input[2].wPos.z
//
#line 38 "F:\ゲーム制作\YRProject\furShader.hlsli"
mov r0.x, l(16)  // r0.x <- LAYER

#line 8 "F:\ゲーム制作\YRProject\furShader_gs.hlsl"
mov r0.yzw, -v[0][0].zzxy
add r0.yzw, r0.yyzw, v[1][0].zzxy  // r0.y <- vec1.z; r0.z <- vec1.x; r0.w <- vec1.y

#line 9
mov r1.xyz, -v[1][0].yzxy
add r1.xyz, r1.xyzx, v[2][0].yzxy  // r1.x <- vec2.y; r1.y <- vec2.z; r1.z <- vec2.x

#line 11
mul r2.xyz, r0.wyzw, r1.yzxy
mul r0.yzw, r0.yyzw, r1.xxyz
mov r0.yzw, -r0.yyzw
add r0.yzw, r0.yyzw, r2.xxyz  // r0.y <- Normal.x; r0.z <- Normal.y; r0.w <- Normal.z

#line 14
mov r1.x, l(0)  // r1.x <- j
mov r1.y, r1.x  // r1.y <- j
loop 
  ult r1.z, r1.y, r0.x
  breakc_z r1.z

#line 15
  mov r1.z, l(0)  // r1.z <- i
  mov r1.w, r1.z  // r1.w <- i
  loop 
    ilt r2.x, r1.w, l(3)
    breakc_z r2.x

#line 16
    itof r2.xyz, l(0, 0, 0, 0)  // r2.x <- data.Normal.x; r2.y <- data.Normal.y; r2.z <- data.Normal.z

#line 17
    mov r3.xyzw, v[r1.w + 0][0].xyzw  // r3.x <- P.x; r3.y <- P.y; r3.z <- P.z; r3.w <- P.w

#line 18
    mul r4.xyz, r0.yzwy, cb2[4].yyyy
    itof r5.xyz, r1.yyyy
    mul r4.xyz, r4.xyzx, r5.xyzx
    add r3.xyz, r3.xyzx, r4.xyzx

#line 19
    mul r4.xyzw, r3.xxxx, cb0[0].xyzw
    mul r5.xyzw, r3.yyyy, cb0[1].xyzw
    add r4.xyzw, r4.xyzw, r5.xyzw
    mul r5.xyzw, r3.zzzz, cb0[2].xyzw
    add r4.xyzw, r4.xyzw, r5.xyzw
    mul r3.xyzw, r3.wwww, cb0[3].xyzw
    add r3.xyzw, r3.xyzw, r4.xyzw  // r3.x <- data.Position.x; r3.y <- data.Position.y; r3.z <- data.Position.z; r3.w <- data.Position.w

#line 20
    mul r4.xyz, cb0[4].xyzx, v[r1.w + 0][1].xxxx
    mul r5.xyz, cb0[5].xyzx, v[r1.w + 0][1].yyyy
    add r4.xyz, r4.xyzx, r5.xyzx
    mul r5.xyz, cb0[6].xyzx, v[r1.w + 0][1].zzzz
    add r4.xyz, r4.xyzx, r5.xyzx
    dp3 r2.w, r4.xyzx, r4.xyzx
    rsq r2.w, r2.w
    mul r4.xyz, r2.wwww, r4.xyzx  // r4.x <- data.wNormal.x; r4.y <- data.wNormal.y; r4.z <- data.wNormal.z

#line 21
    mul r5.xy, cb2[4].xxxx, v[r1.w + 0][2].xyxx  // r5.x <- data.Tex.x; r5.y <- data.Tex.y

#line 22
    mov r6.xyzw, v[r1.w + 0][3].xyzw  // r6.x <- data.Color.x; r6.y <- data.Color.y; r6.z <- data.Color.z; r6.w <- data.Color.w

#line 25
    mov r7.xyz, v[r1.w + 0][4].xyzx  // r7.x <- data.wPos.x; r7.y <- data.wPos.y; r7.z <- data.wPos.z

#line 26
    mov o0.xyzw, r3.xyzw
    mov o1.xy, r5.xyxx
    mov o2.xyzw, r6.xyzw
    mov o3.xyz, r4.xyzx
    mov o4.xyz, r7.xyzx
    mov o5.xyz, r2.xyzx
    emit_stream m0

#line 27
    iadd r1.w, r1.w, l(1)
  endloop 

#line 29
  iadd r1.y, r1.y, l(1)
endloop 

#line 30
cut_stream m0

#line 31
ret 
// Approximately 56 instruction slots used
