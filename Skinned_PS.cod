//
// Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
//
//
// Buffer Definitions: 
//
// cbuffer CONSTANT_BUFFER
// {
//
//   row_major float4x4 world_view_projection;// Offset:    0 Size:    64 [unused]
//   row_major float4x4 world;          // Offset:   64 Size:    64 [unused]
//   float4 material_color;             // Offset:  128 Size:    16 [unused]
//   float4 light_direction;            // Offset:  144 Size:    16
//   float4 light_color;                // Offset:  160 Size:    16
//   float4 ambient_color;              // Offset:  176 Size:    16
//   row_major float4x4 bone_transforms[32];// Offset:  192 Size:  2048 [unused]
//   float4 EyePos;                     // Offset: 2240 Size:    16 [unused]
//
// }
//
//
// Resource Bindings:
//
// Name                                 Type  Format         Dim Slot Elements
// ------------------------------ ---------- ------- ----------- ---- --------
// diffuse_map_sampler_state         sampler      NA          NA    0        1
// diffuse_map                       texture  float4          2d    0        1
// CONSTANT_BUFFER                   cbuffer      NA          NA    0        1
//
//
//
// Input signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_POSITION              0   xyzw        0      POS   float       
// NORMAL                   0   xyzw        1     NONE   float   xyzw
// TEXCOORD                 0   xy          2     NONE   float   xy  
// WEIGHTS                  0   xyzw        3     NONE   float       
// BONES                    0   xyzw        4     NONE    uint       
// COLOR                    0   xyzw        5     NONE   float   xyz 
// TEXCOORD                 1   xyz         6     NONE   float       
// TEXCOORD                 2   xyz         7     NONE   float   xyz 
// TEXCOORD                 4   xyz         8     NONE   float       
//
//
// Output signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_TARGET                0   xyzw        0   TARGET   float   xyzw
//
ps_5_0
dcl_globalFlags refactoringAllowed | skipOptimization
dcl_constantbuffer cb0[12], immediateIndexed
dcl_sampler s0, mode_default
dcl_resource_texture2d (float,float,float,float) t0
dcl_input_ps linear v1.xyzw
dcl_input_ps linear v2.xy
dcl_input_ps linear v5.xyz
dcl_input_ps linear v7.xyz
dcl_output o0.xyzw
dcl_temps 8
//
// Initial variable locations:
//   v0.x <- pin.position.x; v0.y <- pin.position.y; v0.z <- pin.position.z; v0.w <- pin.position.w; 
//   v1.x <- pin.normal.x; v1.y <- pin.normal.y; v1.z <- pin.normal.z; v1.w <- pin.normal.w; 
//   v2.x <- pin.texcoord.x; v2.y <- pin.texcoord.y; 
//   v3.x <- pin.bone_weights.x; v3.y <- pin.bone_weights.y; v3.z <- pin.bone_weights.z; v3.w <- pin.bone_weights.w; 
//   v4.x <- pin.bone_indices.x; v4.y <- pin.bone_indices.y; v4.z <- pin.bone_indices.z; v4.w <- pin.bone_indices.w; 
//   v5.x <- pin.color.x; v5.y <- pin.color.y; v5.z <- pin.color.z; v5.w <- pin.color.w; 
//   v6.x <- pin.wNormal.x; v6.y <- pin.wNormal.y; v6.z <- pin.wNormal.z; 
//   v7.x <- pin.wEyeDir.x; v7.y <- pin.wEyeDir.y; v7.z <- pin.wEyeDir.z; 
//   v8.x <- pin.wPos.x; v8.y <- pin.wPos.y; v8.z <- pin.wPos.z; 
//   o0.x <- <main return value>.x; o0.y <- <main return value>.y; o0.z <- <main return value>.z; o0.w <- <main return value>.w
//
#line 81 "E:\ÉQÅ[ÉÄêßçÏ\YRProject\Skinned_PS"
sample_indexable(texture2d)(float,float,float,float) r0.xyzw, v2.xyxx, t0.xyzw, s0  // r0.x <- color.x; r0.y <- color.y; r0.z <- color.z; r0.w <- color.w
dp4 r1.x, v1.xyzw, v1.xyzw
rsq r1.x, r1.x
mul r1.xyz, r1.xxxx, v1.yxzy  // r1.x <- N.y; r1.y <- N.x; r1.z <- N.z

#line 85
dp3 r1.w, v7.xyzx, v7.xyzx
rsq r1.w, r1.w
mul r2.xyz, r1.wwww, v7.xyzx  // r2.x <- E.x; r2.y <- E.y; r2.z <- E.z
mov r3.xyz, -cb0[9].xyzx
dp3 r1.w, r3.xyzx, r3.xyzx
rsq r1.w, r1.w
mul r3.xyz, r1.wwww, r3.xyzx  // r3.x <- L.x; r3.y <- L.y; r3.z <- L.z

#line 91
nop 
mov r1.x, r1.x
mov r4.xyz, l(0,0,1.000000,0)
mov r5.xyz, l(1.000000,0,0,0)

#line 71
add r1.w, r1.x, l(1.000000)
mul r1.w, r1.w, l(0.500000)  // r1.w <- skyblend
mov r2.w, -r1.w
add r2.w, r2.w, l(1.000000)  // r2.w <- groundblend
mul r4.xyz, r1.wwww, r4.xyzx
mul r5.xyz, r2.wwww, r5.xyzx
add r4.xyz, r4.xyzx, r5.xyzx  // r4.x <- <HemiSphereLight return value>.x; r4.y <- <HemiSphereLight return value>.y; r4.z <- <HemiSphereLight return value>.z

#line 91
mul r4.xyz, r4.xyzx, cb0[11].xyzx  // r4.x <- A.x; r4.y <- A.y; r4.z <- A.z

#line 94
mov r5.xyz, cb0[10].xyzx  // r5.x <- C.x; r5.y <- C.y; r5.z <- C.z
mov r6.xyz, l(1.000000,1.000000,1.000000,0)  // r6.x <- Kd.x; r6.y <- Kd.y; r6.z <- Kd.z
nop 
mov r1.xyz, r1.xyzx
mov r3.xyz, r3.xyzx
mov r5.xyz, r5.xyzx
mov r6.xyz, r6.xyzx

#line 15
dp3 r1.w, r1.yxzy, r3.xyzx  // r1.w <- D
itof r2.w, l(0)
max r1.w, r1.w, r2.w
mul r6.xyz, r5.xyzx, r6.xyzx
mul r6.xyz, r1.wwww, r6.xyzx  // r6.x <- <Diffuse return value>.x; r6.y <- <Diffuse return value>.y; r6.z <- <Diffuse return value>.z

#line 96
mov r6.xyz, r6.xyzx  // r6.x <- D.x; r6.y <- D.y; r6.z <- D.z
mov r7.xyz, l(1.000000,1.000000,1.000000,0)  // r7.x <- Ks.x; r7.y <- Ks.y; r7.z <- Ks.z

#line 102
nop 
mov r1.xyz, r1.xyzx
mov r3.xyz, -r3.xyzx
mov r5.xyz, r5.xyzx
mov r2.xyz, r2.xyzx
mov r7.xyz, r7.xyzx

#line 33
add r2.xyz, r2.xyzx, r3.xyzx
dp3 r1.w, r2.xyzx, r2.xyzx
rsq r1.w, r1.w
mul r2.xyz, r1.wwww, r2.xyzx  // r2.x <- H.x; r2.y <- H.y; r2.z <- H.z
dp3 r1.z, r2.yxzy, r1.xyzx
mov r1.xyz, r1.zzzz  // r1.x <- S.x; r1.y <- S.y; r1.z <- S.z
itof r2.xyz, l(0, 0, 0, 0)
max r1.xyz, r1.xyzx, r2.xyzx
mov r2.xyz, l(1.000000,1.000000,1.000000,0)
mul r2.xyz, r1.xyzx, r2.xyzx
mul r1.xyz, r1.xyzx, r1.xyzx
mul r1.xyz, r1.xyzx, r1.xyzx
mul r1.xyz, r1.xyzx, r2.xyzx  // r1.x <- S.x; r1.y <- S.y; r1.z <- S.z
mul r1.xyz, r7.xyzx, r1.xyzx
mul r1.xyz, r5.xyzx, r1.xyzx  // r1.x <- S.x; r1.y <- S.y; r1.z <- S.z
mov r1.xyz, r1.xyzx  // r1.x <- <BlinnPhongSpecular return value>.x; r1.y <- <BlinnPhongSpecular return value>.y; r1.z <- <BlinnPhongSpecular return value>.z

#line 102
mov r1.xyz, r1.xyzx  // r1.x <- S.x; r1.y <- S.y; r1.z <- S.z
add r2.xyz, r4.xyzx, r6.xyzx
add r1.xyz, r1.xyzx, r2.xyzx
mul r1.xyz, r1.xyzx, v5.xyzx
mul r0.xyz, r0.xyzx, r1.xyzx

#line 108
mov o0.xyz, r0.xyzx
mov o0.w, r0.w
ret 
// Approximately 67 instruction slots used
