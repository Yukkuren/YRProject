//
// Generated by Microsoft (R) HLSL Shader Compiler 10.1
//
//
// Buffer Definitions: 
//
// cbuffer CONSTANT_BUFFER
// {
//
//   row_major float4x4 world_view_projection;// Offset:    0 Size:    64 [unused]
//   row_major float4x4 world;          // Offset:   64 Size:    64
//   float4 material_color;             // Offset:  128 Size:    16 [unused]
//   float4 light_direction;            // Offset:  144 Size:    16 [unused]
//   float4 light_color;                // Offset:  160 Size:    16 [unused]
//   float4 ambient_color;              // Offset:  176 Size:    16 [unused]
//   row_major float4x4 bone_transforms[128];// Offset:  192 Size:  8192
//   float4 EyePos;                     // Offset: 8384 Size:    16 [unused]
//   row_major float4x4 view;           // Offset: 8400 Size:    64 [unused]
//   row_major float4x4 projection;     // Offset: 8464 Size:    64 [unused]
//   float3 at;                         // Offset: 8528 Size:    12 [unused]
//   float lumi_factor;                 // Offset: 8540 Size:     4 [unused]
//   float Offset_X;                    // Offset: 8544 Size:     4
//   float Offset_Y;                    // Offset: 8548 Size:     4
//   float dummy00;                     // Offset: 8552 Size:     4 [unused]
//   float dummy01;                     // Offset: 8556 Size:     4 [unused]
//
// }
//
//
// Resource Bindings:
//
// Name                                 Type  Format         Dim      HLSL Bind  Count
// ------------------------------ ---------- ------- ----------- -------------- ------
// CONSTANT_BUFFER                   cbuffer      NA          NA            cb0      1 
//
//
//
// Input signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// POSITION                 0   xyz         0     NONE   float   xyz 
// NORMAL                   0   xyz         1     NONE   float   xyz 
// TEXCOORD                 0   xy          2     NONE   float   xy  
// WEIGHTS                  0   xyzw        3     NONE   float   xyzw
// BONES                    0   xyzw        4     NONE    uint   xyzw
//
//
// Output signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// POSITION                 0   xyzw        0     NONE   float   xyzw
// NORMAL                   0   xyz         1     NONE   float   xyz 
// TEXCOORD                 0   xy          2     NONE   float   xy  
// COLOR                    0   xyzw        3     NONE   float   xyzw
// TEXCOORD                 1   xyz         4     NONE   float   xyz 
// TEXCOORD                 2   xyz         5     NONE   float   xyz 
//
vs_5_0
dcl_globalFlags refactoringAllowed | skipOptimization
dcl_immediateConstantBuffer { { 1.000000, 0, 0, 0},
                              { 0, 1.000000, 0, 0},
                              { 0, 0, 1.000000, 0},
                              { 0, 0, 0, 1.000000},
                              { -1, 0, 0, 0},
                              { 0, -1, 0, 0},
                              { 0, 0, -1, 0},
                              { 0, 0, 0, -1} }
dcl_constantbuffer CB0[535], dynamicIndexed
dcl_input v0.xyz
dcl_input v1.xyz
dcl_input v2.xy
dcl_input v3.xyzw
dcl_input v4.xyzw
dcl_output o0.xyzw
dcl_output o1.xyz
dcl_output o2.xy
dcl_output o3.xyzw
dcl_output o4.xyz
dcl_output o5.xyz
dcl_temps 7
//
// Initial variable locations:
//   v0.x <- input.Position.x; v0.y <- input.Position.y; v0.z <- input.Position.z; 
//   v1.x <- input.Normal.x; v1.y <- input.Normal.y; v1.z <- input.Normal.z; 
//   v2.x <- input.Tex.x; v2.y <- input.Tex.y; 
//   v3.x <- input.bone_weights.x; v3.y <- input.bone_weights.y; v3.z <- input.bone_weights.z; v3.w <- input.bone_weights.w; 
//   v4.x <- input.bone_indices.x; v4.y <- input.bone_indices.y; v4.z <- input.bone_indices.z; v4.w <- input.bone_indices.w; 
//   o5.x <- <main return value>.wPos.x; o5.y <- <main return value>.wPos.y; o5.z <- <main return value>.wPos.z; 
//   o4.x <- <main return value>.wNormal.x; o4.y <- <main return value>.wNormal.y; o4.z <- <main return value>.wNormal.z; 
//   o3.x <- <main return value>.Color.x; o3.y <- <main return value>.Color.y; o3.z <- <main return value>.Color.z; o3.w <- <main return value>.Color.w; 
//   o2.x <- <main return value>.Tex.x; o2.y <- <main return value>.Tex.y; 
//   o1.x <- <main return value>.Normal.x; o1.y <- <main return value>.Normal.y; o1.z <- <main return value>.Normal.z; 
//   o0.x <- <main return value>.Position.x; o0.y <- <main return value>.Position.y; o0.z <- <main return value>.Position.z; o0.w <- <main return value>.Position.w
//
#line 7 "F:\ゲーム制作\YRProject\ParallelToon_vs.hlsl"
itof r0.xyz, l(0, 0, 0, 0)  // r0.x <- ps.x; r0.y <- ps.y; r0.z <- ps.z

#line 8
itof r1.xyz, l(0, 0, 0, 0)  // r1.x <- n.x; r1.y <- n.y; r1.z <- n.z

#line 11
mov r0.w, l(0)  // r0.w <- i2
mov r2.xyz, r0.xyzx  // r2.x <- ps.x; r2.y <- ps.y; r2.z <- ps.z
mov r3.xyz, r1.xyzx  // r3.x <- n.x; r3.y <- n.y; r3.z <- n.z
mov r1.w, r0.w  // r1.w <- i2
loop 
  ilt r3.w, r1.w, l(4)
  breakc_z r3.w

#line 13
  dp4 r3.w, v3.xyzw, icb[r1.w + 0].xyzw
  and r4.xyzw, v4.xyzw, icb[r1.w + 4].xyzw
  or r4.xy, r4.ywyy, r4.xzxx
  or r4.x, r4.y, r4.x
  imul null, r4.x, r4.x, l(4)
  mul r4.yzw, v0.xxxx, cb0[r4.x + 12].xxyz
  mul r5.xyz, v0.yyyy, cb0[r4.x + 13].xyzx
  add r4.yzw, r4.yyzw, r5.xxyz
  mul r5.xyz, v0.zzzz, cb0[r4.x + 14].xyzx
  add r4.yzw, r4.yyzw, r5.xxyz
  mul r5.xyz, l(1.000000, 1.000000, 1.000000, 0.000000), cb0[r4.x + 15].xyzx
  add r4.xyz, r4.yzwy, r5.xyzx
  mul r4.xyz, r3.wwww, r4.xyzx
  add r2.xyz, r2.xyzx, r4.xyzx

#line 14
  dp4 r3.w, v3.xyzw, icb[r1.w + 0].xyzw
  itof r4.x, l(0)
  and r5.xyzw, v4.xyzw, icb[r1.w + 4].xyzw
  or r4.yz, r5.yywy, r5.xxzx
  or r4.y, r4.z, r4.y
  imul null, r4.y, r4.y, l(4)
  mul r5.xyz, v1.xxxx, cb0[r4.y + 12].xyzx
  mul r6.xyz, v1.yyyy, cb0[r4.y + 13].xyzx
  add r5.xyz, r5.xyzx, r6.xyzx
  mul r6.xyz, v1.zzzz, cb0[r4.y + 14].xyzx
  add r5.xyz, r5.xyzx, r6.xyzx
  mul r4.xyz, r4.xxxx, cb0[r4.y + 15].xyzx
  add r4.xyz, r4.xyzx, r5.xyzx
  mul r4.xyz, r3.wwww, r4.xyzx
  add r3.xyz, r3.xyzx, r4.xyzx

#line 15
  iadd r1.w, r1.w, l(1)
endloop 

#line 16
mov r2.xyz, r2.xyzx  // r2.x <- input.Position.x; r2.y <- input.Position.y; r2.z <- input.Position.z

#line 17
mov r3.xyz, r3.xyzx  // r3.x <- input.Normal.x; r3.y <- input.Normal.y; r3.z <- input.Normal.z

#line 27
mov r2.xyz, r2.xyzx  // r2.x <- POS.x; r2.y <- POS.y; r2.z <- POS.z
mov r2.w, l(1.000000)  // r2.w <- POS.w

#line 29
mul r0.xyzw, r3.xxxx, cb0[4].xyzw
mul r1.xyzw, r3.yyyy, cb0[5].xyzw
add r0.xyzw, r0.xyzw, r1.xyzw
mul r1.xyzw, r3.zzzz, cb0[6].xyzw
add r0.xyzw, r0.xyzw, r1.xyzw
dp4 r0.w, r0.xyzw, r0.xyzw
rsq r0.w, r0.w
mul r0.xyz, r0.wwww, r0.xyzx  // r0.x <- N.x; r0.y <- N.y; r0.z <- N.z

#line 31
mul r1.xyz, r2.xxxx, cb0[4].xyzx
mul r4.xyz, r2.yyyy, cb0[5].xyzx
add r1.xyz, r1.xyzx, r4.xyzx
mul r4.xyz, r2.zzzz, cb0[6].xyzx
add r1.xyz, r1.xyzx, r4.xyzx
mul r4.xyz, r2.wwww, cb0[7].xyzx
add r1.xyz, r1.xyzx, r4.xyzx  // r1.x <- worldPos.x; r1.y <- worldPos.y; r1.z <- worldPos.z

#line 33
mov r2.xyzw, r2.xyzw  // r2.x <- output.Position.x; r2.y <- output.Position.y; r2.z <- output.Position.z; r2.w <- output.Position.w

#line 34
mov r4.xyzw, l(1.000000,1.000000,1.000000,1.000000)  // r4.x <- output.Color.x; r4.y <- output.Color.y; r4.z <- output.Color.z; r4.w <- output.Color.w

#line 35
mov r3.xyz, r3.xyzx  // r3.x <- output.Normal.x; r3.y <- output.Normal.y; r3.z <- output.Normal.z

#line 37
mov r0.xyz, r0.xyzx  // r0.x <- output.wNormal.x; r0.y <- output.wNormal.y; r0.z <- output.wNormal.z

#line 38
mov r1.xyz, r1.xyzx  // r1.x <- output.wPos.x; r1.y <- output.wPos.y; r1.z <- output.wPos.z

#line 40
add r0.w, v2.x, cb0[534].x  // r0.w <- output.Tex.x

#line 41
add r1.w, v2.y, cb0[534].y  // r1.w <- output.Tex.y

#line 43
mov o0.xyzw, r2.xyzw
mov o3.xyzw, r4.xyzw
mov o1.xyz, r3.xyzx
mov o4.xyz, r0.xyzx
mov o5.xyz, r1.xyzx
mov o2.x, r0.w
mov o2.y, r1.w
ret 
// Approximately 74 instruction slots used
